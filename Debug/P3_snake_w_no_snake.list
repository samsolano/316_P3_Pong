
P3_snake_w_no_snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08002170  08002170  00003170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002278  08002278  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002278  08002278  00003278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002280  08002280  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002280  08002280  00003280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002284  08002284  00003284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002288  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000060  080022e8  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080022e8  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000046fe  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000100b  00000000  00000000  0000878e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  000097a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000042b  00000000  00000000  00009d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024daa  00000000  00000000  0000a183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005871  00000000  00000000  0002ef2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d81  00000000  00000000  0003479e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011651f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a58  00000000  00000000  00116564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00117fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002158 	.word	0x08002158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002158 	.word	0x08002158

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	@ (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <UART_init>:
	sprintf(stringify,string ,value); //take value and format it into char array
	UART_print(stringify);
}

void UART_init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	 // Enable clocks for GPIOA and USART2
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   // Enable GPIOA clock
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <UART_init+0x74>)
 80002b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000320 <UART_init+0x74>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // Enable USART2 clock
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <UART_init+0x74>)
 80002be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002c0:	4a17      	ldr	r2, [pc, #92]	@ (8000320 <UART_init+0x74>)
 80002c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c6:	6593      	str	r3, [r2, #88]	@ 0x58

	// Configure PA2 as USART2_TX and PA3 as USART2_RX
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3); // Clear mode bits
 80002c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1); // Set alternate function mode
 80002d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80002e6:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL2_Pos); // Set AF7 (USART2) for PA2
 80002e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ec:	6a1b      	ldr	r3, [r3, #32]
 80002ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL3_Pos); // Set AF7 (USART2) for PA3
 80002f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002fc:	6a1b      	ldr	r3, [r3, #32]
 80002fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000302:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000306:	6213      	str	r3, [r2, #32]

	// Configure USART2 for 115200 baud rate (assuming 4 MHz clock)
	USART2->BRR = 208; // Set baud rate divisor for 115200 baud (4 MHz / (16 * 115200) â‰ˆ 35)
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <UART_init+0x78>)
 800030a:	22d0      	movs	r2, #208	@ 0xd0
 800030c:	60da      	str	r2, [r3, #12]

	// Enable USART2, transmitter, and receiver and receive data register
	USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE);
 800030e:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <UART_init+0x78>)
 8000310:	222d      	movs	r2, #45	@ 0x2d
 8000312:	601a      	str	r2, [r3, #0]
	//enable interrupts
	NVIC_EnableIRQ(USART2_IRQn);
 8000314:	2026      	movs	r0, #38	@ 0x26
 8000316:	f7ff ffab 	bl	8000270 <__NVIC_EnableIRQ>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	40004400 	.word	0x40004400

08000328 <UART_print>:

void UART_print(char *str)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	while (*str != '\0') 		// Loop until the end of the string
 8000330:	e00c      	b.n	800034c <UART_print+0x24>
	{
		while (!(USART2->ISR & USART_ISR_TXE)) {} //finish receiving
 8000332:	bf00      	nop
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <UART_print+0x3c>)
 8000336:	69db      	ldr	r3, [r3, #28]
 8000338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f9      	beq.n	8000334 <UART_print+0xc>
		USART2->TDR = *str++; 				//write it out
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	607a      	str	r2, [r7, #4]
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <UART_print+0x3c>)
 800034a:	851a      	strh	r2, [r3, #40]	@ 0x28
	while (*str != '\0') 		// Loop until the end of the string
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d1ee      	bne.n	8000332 <UART_print+0xa>
	}

}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40004400 	.word	0x40004400

08000368 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0

	//if receiving data interrupt
	if(USART2->ISR & USART_ISR_RXNE)
 800036e:	4b1a      	ldr	r3, [pc, #104]	@ (80003d8 <USART2_IRQHandler+0x70>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	f003 0320 	and.w	r3, r3, #32
 8000376:	2b00      	cmp	r3, #0
 8000378:	d029      	beq.n	80003ce <USART2_IRQHandler+0x66>
	{
		char single[2];
		//put input anded with the read register into a variable
		sprintf(single,"%c", (char)(USART2->RDR & USART_RDR_RDR));
 800037a:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <USART2_IRQHandler+0x70>)
 800037c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800037e:	b29b      	uxth	r3, r3
 8000380:	b2db      	uxtb	r3, r3
 8000382:	461a      	mov	r2, r3
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4915      	ldr	r1, [pc, #84]	@ (80003dc <USART2_IRQHandler+0x74>)
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fa45 	bl	8001818 <siprintf>

		if(single[0] == 'a') //when s is pressed switch between DC and AC views
 800038e:	793b      	ldrb	r3, [r7, #4]
 8000390:	2b61      	cmp	r3, #97	@ 0x61
 8000392:	d109      	bne.n	80003a8 <USART2_IRQHandler+0x40>
		{
			if(paddle_position >= 3)
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <USART2_IRQHandler+0x78>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d905      	bls.n	80003a8 <USART2_IRQHandler+0x40>
			{
				paddle_position -= 3;
 800039c:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <USART2_IRQHandler+0x78>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	3b03      	subs	r3, #3
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <USART2_IRQHandler+0x78>)
 80003a6:	701a      	strb	r2, [r3, #0]
			}
		}
		if(single[0] == 'd') //when s is pressed switch between DC and AC views
 80003a8:	793b      	ldrb	r3, [r7, #4]
 80003aa:	2b64      	cmp	r3, #100	@ 0x64
 80003ac:	d109      	bne.n	80003c2 <USART2_IRQHandler+0x5a>
		{
			if(paddle_position <= 76)
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <USART2_IRQHandler+0x78>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b4c      	cmp	r3, #76	@ 0x4c
 80003b4:	d805      	bhi.n	80003c2 <USART2_IRQHandler+0x5a>
			{
				paddle_position += 3;
 80003b6:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <USART2_IRQHandler+0x78>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	3303      	adds	r3, #3
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <USART2_IRQHandler+0x78>)
 80003c0:	701a      	strb	r2, [r3, #0]
			}
		}
		USART2->ISR &= ~(USART_ISR_RXNE);
 80003c2:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <USART2_IRQHandler+0x70>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a04      	ldr	r2, [pc, #16]	@ (80003d8 <USART2_IRQHandler+0x70>)
 80003c8:	f023 0320 	bic.w	r3, r3, #32
 80003cc:	61d3      	str	r3, [r2, #28]
	}

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40004400 	.word	0x40004400
 80003dc:	08002180 	.word	0x08002180
 80003e0:	20000000 	.word	0x20000000

080003e4 <main>:
void Check_Screen_Collisions(int8_t *dx, int8_t *dy, int8_t *x_position, int8_t *y_position);
void Check_Paddle_Collisions(int8_t *dx, int8_t *dy, int8_t *x_position, int8_t *y_position);


int main(void)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
	HAL_Init();
 80003ea:	f000 fa8e 	bl	800090a <HAL_Init>
	SystemClock_Config();
 80003ee:	f000 f97b 	bl	80006e8 <SystemClock_Config>
	UART_init();
 80003f2:	f7ff ff5b 	bl	80002ac <UART_init>

	Ball ball;
	GAME_init(&ball);
 80003f6:	463b      	mov	r3, r7
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f95f 	bl	80006bc <GAME_init>

	while (1)
	{
		Print_Screen(&(ball.x), &(ball.y));
 80003fe:	463b      	mov	r3, r7
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	463b      	mov	r3, r7
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f8c4 	bl	8000594 <Print_Screen>
		Check_Screen_Collisions(&(ball.dx), &(ball.dy), &(ball.x), &(ball.y));
 800040c:	463b      	mov	r3, r7
 800040e:	1c5c      	adds	r4, r3, #1
 8000410:	463a      	mov	r2, r7
 8000412:	463b      	mov	r3, r7
 8000414:	1cd9      	adds	r1, r3, #3
 8000416:	463b      	mov	r3, r7
 8000418:	1c98      	adds	r0, r3, #2
 800041a:	4623      	mov	r3, r4
 800041c:	f000 f870 	bl	8000500 <Check_Screen_Collisions>
		Check_Paddle_Collisions(&(ball.dx), &(ball.dy), &(ball.x), &(ball.y));
 8000420:	463b      	mov	r3, r7
 8000422:	1c5c      	adds	r4, r3, #1
 8000424:	463a      	mov	r2, r7
 8000426:	463b      	mov	r3, r7
 8000428:	1cd9      	adds	r1, r3, #3
 800042a:	463b      	mov	r3, r7
 800042c:	1c98      	adds	r0, r3, #2
 800042e:	4623      	mov	r3, r4
 8000430:	f000 f81e 	bl	8000470 <Check_Paddle_Collisions>

		if(ball.y >= 24)
 8000434:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000438:	2b17      	cmp	r3, #23
 800043a:	dde0      	ble.n	80003fe <main+0x1a>
		{
			UART_print("\033[2J\033[H");
 800043c:	480a      	ldr	r0, [pc, #40]	@ (8000468 <main+0x84>)
 800043e:	f7ff ff73 	bl	8000328 <UART_print>
			for(uint16_t i = 0; i < 900; i++)
 8000442:	2300      	movs	r3, #0
 8000444:	80fb      	strh	r3, [r7, #6]
 8000446:	e005      	b.n	8000454 <main+0x70>
			{
				UART_print("GAME OVER ");
 8000448:	4808      	ldr	r0, [pc, #32]	@ (800046c <main+0x88>)
 800044a:	f7ff ff6d 	bl	8000328 <UART_print>
			for(uint16_t i = 0; i < 900; i++)
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	3301      	adds	r3, #1
 8000452:	80fb      	strh	r3, [r7, #6]
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800045a:	d3f5      	bcc.n	8000448 <main+0x64>
 800045c:	2300      	movs	r3, #0
			}
			break;
		}
	}
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bd90      	pop	{r4, r7, pc}
 8000466:	bf00      	nop
 8000468:	08002184 	.word	0x08002184
 800046c:	0800218c 	.word	0x0800218c

08000470 <Check_Paddle_Collisions>:


void Check_Paddle_Collisions(int8_t *dx, int8_t *dy, int8_t *x_position, int8_t *y_position)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]

	if((*x_position <= (paddle_position + 3)) && (*x_position >= paddle_position) && (*y_position == 20))
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f993 3000 	ldrsb.w	r3, [r3]
 8000484:	461a      	mov	r2, r3
 8000486:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <Check_Paddle_Collisions+0x8c>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	3303      	adds	r3, #3
 800048c:	429a      	cmp	r2, r3
 800048e:	dc12      	bgt.n	80004b6 <Check_Paddle_Collisions+0x46>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f993 3000 	ldrsb.w	r3, [r3]
 8000496:	461a      	mov	r2, r3
 8000498:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <Check_Paddle_Collisions+0x8c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	429a      	cmp	r2, r3
 800049e:	db0a      	blt.n	80004b6 <Check_Paddle_Collisions+0x46>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	f993 3000 	ldrsb.w	r3, [r3]
 80004a6:	2b14      	cmp	r3, #20
 80004a8:	d105      	bne.n	80004b6 <Check_Paddle_Collisions+0x46>
	{
		*dy = -1;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	22ff      	movs	r2, #255	@ 0xff
 80004ae:	701a      	strb	r2, [r3, #0]
		*dx = -1;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	22ff      	movs	r2, #255	@ 0xff
 80004b4:	701a      	strb	r2, [r3, #0]
	}
	if((*x_position > (paddle_position + 3)) && (*x_position <= paddle_position + 7) && (*y_position == 20))
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f993 3000 	ldrsb.w	r3, [r3]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <Check_Paddle_Collisions+0x8c>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3303      	adds	r3, #3
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dd13      	ble.n	80004f0 <Check_Paddle_Collisions+0x80>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f993 3000 	ldrsb.w	r3, [r3]
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <Check_Paddle_Collisions+0x8c>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	3307      	adds	r3, #7
 80004d6:	429a      	cmp	r2, r3
 80004d8:	dc0a      	bgt.n	80004f0 <Check_Paddle_Collisions+0x80>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	f993 3000 	ldrsb.w	r3, [r3]
 80004e0:	2b14      	cmp	r3, #20
 80004e2:	d105      	bne.n	80004f0 <Check_Paddle_Collisions+0x80>
	{
		*dy = -1;
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	22ff      	movs	r2, #255	@ 0xff
 80004e8:	701a      	strb	r2, [r3, #0]
		*dx = 1;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2201      	movs	r2, #1
 80004ee:	701a      	strb	r2, [r3, #0]
	}


}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	20000000 	.word	0x20000000

08000500 <Check_Screen_Collisions>:


void Check_Screen_Collisions(int8_t *dx, int8_t *dy, int8_t *x_position, int8_t *y_position)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
 800050c:	603b      	str	r3, [r7, #0]
	*x_position += *dx;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f993 3000 	ldrsb.w	r3, [r3]
 8000514:	b2da      	uxtb	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	f993 3000 	ldrsb.w	r3, [r3]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4413      	add	r3, r2
 8000520:	b2db      	uxtb	r3, r3
 8000522:	b25a      	sxtb	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	701a      	strb	r2, [r3, #0]
	*y_position += *dy;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	f993 3000 	ldrsb.w	r3, [r3]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	f993 3000 	ldrsb.w	r3, [r3]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4413      	add	r3, r2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	b25a      	sxtb	r2, r3
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	701a      	strb	r2, [r3, #0]

	if((*x_position == 77) && (*dx > 0))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f993 3000 	ldrsb.w	r3, [r3]
 8000548:	2b4d      	cmp	r3, #77	@ 0x4d
 800054a:	d107      	bne.n	800055c <Check_Screen_Collisions+0x5c>
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f993 3000 	ldrsb.w	r3, [r3]
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd02      	ble.n	800055c <Check_Screen_Collisions+0x5c>
	{
		*dx = -1;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	22ff      	movs	r2, #255	@ 0xff
 800055a:	701a      	strb	r2, [r3, #0]
	}
	if((*x_position == 1) && (*dx < 0))
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f993 3000 	ldrsb.w	r3, [r3]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d107      	bne.n	8000576 <Check_Screen_Collisions+0x76>
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f993 3000 	ldrsb.w	r3, [r3]
 800056c:	2b00      	cmp	r3, #0
 800056e:	da02      	bge.n	8000576 <Check_Screen_Collisions+0x76>
	{
		*dx = 1;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
	}

	if(*y_position == 1)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	f993 3000 	ldrsb.w	r3, [r3]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d102      	bne.n	8000586 <Check_Screen_Collisions+0x86>
	{
		*dy = 1;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	}
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <Print_Screen>:


void Print_Screen(int8_t *x_position, int8_t *y_position)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < 100000; i++) {}
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e002      	b.n	80005aa <Print_Screen+0x16>
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4a3a      	ldr	r2, [pc, #232]	@ (8000698 <Print_Screen+0x104>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d9f8      	bls.n	80005a4 <Print_Screen+0x10>
	UART_print("\033[2J\033[H");
 80005b2:	483a      	ldr	r0, [pc, #232]	@ (800069c <Print_Screen+0x108>)
 80005b4:	f7ff feb8 	bl	8000328 <UART_print>

	for(uint8_t row = 0; row < VIEW_HEIGHT; row++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	72fb      	strb	r3, [r7, #11]
 80005bc:	e064      	b.n	8000688 <Print_Screen+0xf4>
	{

		for(uint8_t col = 0; col < VIEW_WIDTH; col++)
 80005be:	2300      	movs	r3, #0
 80005c0:	72bb      	strb	r3, [r7, #10]
 80005c2:	e058      	b.n	8000676 <Print_Screen+0xe2>
		{
			if(row == 0 && col == 0)
 80005c4:	7afb      	ldrb	r3, [r7, #11]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d105      	bne.n	80005d6 <Print_Screen+0x42>
 80005ca:	7abb      	ldrb	r3, [r7, #10]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <Print_Screen+0x42>
			{
				UART_print("|-------------------------------------------------------------------------------");
 80005d0:	4833      	ldr	r0, [pc, #204]	@ (80006a0 <Print_Screen+0x10c>)
 80005d2:	f7ff fea9 	bl	8000328 <UART_print>
			}
			if(col == 0)
 80005d6:	7abb      	ldrb	r3, [r7, #10]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <Print_Screen+0x4e>
			{
				UART_print("|");
 80005dc:	4831      	ldr	r0, [pc, #196]	@ (80006a4 <Print_Screen+0x110>)
 80005de:	f7ff fea3 	bl	8000328 <UART_print>
			}
			if((col == (VIEW_WIDTH - 2)) && (row == *y_position)) //if row where ball is
 80005e2:	7abb      	ldrb	r3, [r7, #10]
 80005e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80005e6:	d109      	bne.n	80005fc <Print_Screen+0x68>
 80005e8:	7afb      	ldrb	r3, [r7, #11]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	f992 2000 	ldrsb.w	r2, [r2]
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d103      	bne.n	80005fc <Print_Screen+0x68>
			{
				UART_print("|");
 80005f4:	482b      	ldr	r0, [pc, #172]	@ (80006a4 <Print_Screen+0x110>)
 80005f6:	f7ff fe97 	bl	8000328 <UART_print>
 80005fa:	e018      	b.n	800062e <Print_Screen+0x9a>
			}
			else if(col == (VIEW_WIDTH - 1) && (row != *y_position) && (row != 21)) // if row where no ball is
 80005fc:	7abb      	ldrb	r3, [r7, #10]
 80005fe:	2b4f      	cmp	r3, #79	@ 0x4f
 8000600:	d10c      	bne.n	800061c <Print_Screen+0x88>
 8000602:	7afb      	ldrb	r3, [r7, #11]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	f992 2000 	ldrsb.w	r2, [r2]
 800060a:	4293      	cmp	r3, r2
 800060c:	d006      	beq.n	800061c <Print_Screen+0x88>
 800060e:	7afb      	ldrb	r3, [r7, #11]
 8000610:	2b15      	cmp	r3, #21
 8000612:	d003      	beq.n	800061c <Print_Screen+0x88>
			{
				UART_print("|");
 8000614:	4823      	ldr	r0, [pc, #140]	@ (80006a4 <Print_Screen+0x110>)
 8000616:	f7ff fe87 	bl	8000328 <UART_print>
 800061a:	e008      	b.n	800062e <Print_Screen+0x9a>
			}
			else if((col == (VIEW_WIDTH - 3)) && (row == 21)) // if row where paddle is
 800061c:	7abb      	ldrb	r3, [r7, #10]
 800061e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000620:	d105      	bne.n	800062e <Print_Screen+0x9a>
 8000622:	7afb      	ldrb	r3, [r7, #11]
 8000624:	2b15      	cmp	r3, #21
 8000626:	d102      	bne.n	800062e <Print_Screen+0x9a>
			{
				UART_print("|");
 8000628:	481e      	ldr	r0, [pc, #120]	@ (80006a4 <Print_Screen+0x110>)
 800062a:	f7ff fe7d 	bl	8000328 <UART_print>
			}
			if((row == *y_position) && (col == *x_position))	// for printing ball
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	f992 2000 	ldrsb.w	r2, [r2]
 8000636:	4293      	cmp	r3, r2
 8000638:	d108      	bne.n	800064c <Print_Screen+0xb8>
 800063a:	7abb      	ldrb	r3, [r7, #10]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	f992 2000 	ldrsb.w	r2, [r2]
 8000642:	4293      	cmp	r3, r2
 8000644:	d102      	bne.n	800064c <Print_Screen+0xb8>
			{
				UART_print("o");
 8000646:	4818      	ldr	r0, [pc, #96]	@ (80006a8 <Print_Screen+0x114>)
 8000648:	f7ff fe6e 	bl	8000328 <UART_print>
			}
			if((row == 21) && (col == paddle_position))		// for printing paddle
 800064c:	7afb      	ldrb	r3, [r7, #11]
 800064e:	2b15      	cmp	r3, #21
 8000650:	d10b      	bne.n	800066a <Print_Screen+0xd6>
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <Print_Screen+0x118>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	7aba      	ldrb	r2, [r7, #10]
 8000658:	429a      	cmp	r2, r3
 800065a:	d106      	bne.n	800066a <Print_Screen+0xd6>
			{
				UART_print("_______");
 800065c:	4814      	ldr	r0, [pc, #80]	@ (80006b0 <Print_Screen+0x11c>)
 800065e:	f7ff fe63 	bl	8000328 <UART_print>
				col += 4;
 8000662:	7abb      	ldrb	r3, [r7, #10]
 8000664:	3304      	adds	r3, #4
 8000666:	72bb      	strb	r3, [r7, #10]
 8000668:	e002      	b.n	8000670 <Print_Screen+0xdc>
			}
			else
			{
				UART_print(" ");
 800066a:	4812      	ldr	r0, [pc, #72]	@ (80006b4 <Print_Screen+0x120>)
 800066c:	f7ff fe5c 	bl	8000328 <UART_print>
		for(uint8_t col = 0; col < VIEW_WIDTH; col++)
 8000670:	7abb      	ldrb	r3, [r7, #10]
 8000672:	3301      	adds	r3, #1
 8000674:	72bb      	strb	r3, [r7, #10]
 8000676:	7abb      	ldrb	r3, [r7, #10]
 8000678:	2b4f      	cmp	r3, #79	@ 0x4f
 800067a:	d9a3      	bls.n	80005c4 <Print_Screen+0x30>
			}
		}
		UART_print("\r\n");
 800067c:	480e      	ldr	r0, [pc, #56]	@ (80006b8 <Print_Screen+0x124>)
 800067e:	f7ff fe53 	bl	8000328 <UART_print>
	for(uint8_t row = 0; row < VIEW_HEIGHT; row++)
 8000682:	7afb      	ldrb	r3, [r7, #11]
 8000684:	3301      	adds	r3, #1
 8000686:	72fb      	strb	r3, [r7, #11]
 8000688:	7afb      	ldrb	r3, [r7, #11]
 800068a:	2b17      	cmp	r3, #23
 800068c:	d997      	bls.n	80005be <Print_Screen+0x2a>
	}
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	0001869f 	.word	0x0001869f
 800069c:	08002184 	.word	0x08002184
 80006a0:	08002198 	.word	0x08002198
 80006a4:	080021ec 	.word	0x080021ec
 80006a8:	080021f0 	.word	0x080021f0
 80006ac:	20000000 	.word	0x20000000
 80006b0:	080021f4 	.word	0x080021f4
 80006b4:	080021fc 	.word	0x080021fc
 80006b8:	08002200 	.word	0x08002200

080006bc <GAME_init>:


void GAME_init(Ball *ball)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	ball->x = BALL_X_START;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2228      	movs	r2, #40	@ 0x28
 80006c8:	701a      	strb	r2, [r3, #0]
	ball->y = BALL_Y_START;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	220a      	movs	r2, #10
 80006ce:	705a      	strb	r2, [r3, #1]
	ball->dx = 1;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2201      	movs	r2, #1
 80006d4:	709a      	strb	r2, [r3, #2]
	ball->dy = 1;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2201      	movs	r2, #1
 80006da:	70da      	strb	r2, [r3, #3]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b096      	sub	sp, #88	@ 0x58
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2244      	movs	r2, #68	@ 0x44
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f8ae 	bl	8001858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800070e:	f000 fa65 	bl	8000bdc <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000718:	f000 f82c 	bl	8000774 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800071c:	2310      	movs	r3, #16
 800071e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000728:	2390      	movs	r3, #144	@ 0x90
 800072a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4618      	mov	r0, r3
 8000736:	f000 faa7 	bl	8000c88 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000740:	f000 f818 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	2101      	movs	r1, #1
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fe6f 	bl	8001440 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000768:	f000 f804 	bl	8000774 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3758      	adds	r7, #88	@ 0x58
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <HAL_MspInit+0x44>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6613      	str	r3, [r2, #96]	@ 0x60
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <HAL_MspInit+0x44>)
 8000794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a2:	4a08      	ldr	r2, [pc, #32]	@ (80007c4 <HAL_MspInit+0x44>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_MspInit+0x44>)
 80007ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <NMI_Handler+0x4>

080007d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <MemManage_Handler+0x4>

080007e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <UsageFault_Handler+0x4>

080007f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081e:	f000 f8c9 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000830:	4a14      	ldr	r2, [pc, #80]	@ (8000884 <_sbrk+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <_sbrk+0x60>)
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <_sbrk+0x64>)
 8000846:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <_sbrk+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d207      	bcs.n	8000868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000858:	f001 f806 	bl	8001868 <__errno>
 800085c:	4603      	mov	r3, r0
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	e009      	b.n	800087c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086e:	4b07      	ldr	r3, [pc, #28]	@ (800088c <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	4a05      	ldr	r2, [pc, #20]	@ (800088c <_sbrk+0x64>)
 8000878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20018000 	.word	0x20018000
 8000888:	00000400 	.word	0x00000400
 800088c:	2000007c 	.word	0x2000007c
 8000890:	200001d0 	.word	0x200001d0

08000894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <SystemInit+0x20>)
 800089a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800089e:	4a05      	ldr	r2, [pc, #20]	@ (80008b4 <SystemInit+0x20>)
 80008a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008bc:	f7ff ffea 	bl	8000894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c0:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c2:	490d      	ldr	r1, [pc, #52]	@ (80008f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c4:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <LoopForever+0xe>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000904 <LoopForever+0x16>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e6:	f000 ffc5 	bl	8001874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ea:	f7ff fd7b 	bl	80003e4 <main>

080008ee <LoopForever>:

LoopForever:
    b LoopForever
 80008ee:	e7fe      	b.n	80008ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008fc:	08002288 	.word	0x08002288
  ldr r2, =_sbss
 8000900:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000904:	200001cc 	.word	0x200001cc

08000908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC1_2_IRQHandler>

0800090a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000910:	2300      	movs	r3, #0
 8000912:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f91f 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091a:	200f      	movs	r0, #15
 800091c:	f000 f80e 	bl	800093c <HAL_InitTick>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d002      	beq.n	800092c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	71fb      	strb	r3, [r7, #7]
 800092a:	e001      	b.n	8000930 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800092c:	f7ff ff28 	bl	8000780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000930:	79fb      	ldrb	r3, [r7, #7]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <HAL_InitTick+0x6c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d023      	beq.n	8000998 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <HAL_InitTick+0x70>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <HAL_InitTick+0x6c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f91d 	bl	8000ba6 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d10f      	bne.n	8000992 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d809      	bhi.n	800098c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000980:	f000 f8f5 	bl	8000b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000984:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <HAL_InitTick+0x74>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e007      	b.n	800099c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	73fb      	strb	r3, [r7, #15]
 8000990:	e004      	b.n	800099c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e001      	b.n	800099c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	20000004 	.word	0x20000004
 80009b0:	20000008 	.word	0x20000008

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	2000000c 	.word	0x2000000c
 80009d8:	20000080 	.word	0x20000080

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000080 	.word	0x20000080

080009f4 <__NVIC_SetPriorityGrouping>:
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	@ (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	@ (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	@ 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	@ 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff47 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff5c 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffb0 	bl	8000b14 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40007000 	.word	0x40007000

08000bdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bea:	d130      	bne.n	8000c4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bec:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bf8:	d038      	beq.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c02:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2232      	movs	r2, #50	@ 0x32
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	0c9b      	lsrs	r3, r3, #18
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c20:	e002      	b.n	8000c28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c34:	d102      	bne.n	8000c3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f2      	bne.n	8000c22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c48:	d110      	bne.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e00f      	b.n	8000c6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c5a:	d007      	beq.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c64:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	20000004 	.word	0x20000004
 8000c84:	431bde83 	.word	0x431bde83

08000c88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e3ca      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c9a:	4b97      	ldr	r3, [pc, #604]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca4:	4b94      	ldr	r3, [pc, #592]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 80e4 	beq.w	8000e84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x4a>
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b0c      	cmp	r3, #12
 8000cc6:	f040 808b 	bne.w	8000de0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	f040 8087 	bne.w	8000de0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cd2:	4b89      	ldr	r3, [pc, #548]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d005      	beq.n	8000cea <HAL_RCC_OscConfig+0x62>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e3a2      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1a      	ldr	r2, [r3, #32]
 8000cee:	4b82      	ldr	r3, [pc, #520]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <HAL_RCC_OscConfig+0x7c>
 8000cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d02:	e005      	b.n	8000d10 <HAL_RCC_OscConfig+0x88>
 8000d04:	4b7c      	ldr	r3, [pc, #496]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d223      	bcs.n	8000d5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fd1d 	bl	8001758 <RCC_SetFlashLatencyFromMSIRange>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e383      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d28:	4b73      	ldr	r3, [pc, #460]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a72      	ldr	r2, [pc, #456]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b70      	ldr	r3, [pc, #448]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	496d      	ldr	r1, [pc, #436]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d46:	4b6c      	ldr	r3, [pc, #432]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	4968      	ldr	r1, [pc, #416]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
 8000d5a:	e025      	b.n	8000da8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d5c:	4b66      	ldr	r3, [pc, #408]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a65      	ldr	r2, [pc, #404]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b63      	ldr	r3, [pc, #396]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	4960      	ldr	r1, [pc, #384]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	495b      	ldr	r1, [pc, #364]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d109      	bne.n	8000da8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fcdd 	bl	8001758 <RCC_SetFlashLatencyFromMSIRange>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e343      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000da8:	f000 fc4a 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b52      	ldr	r3, [pc, #328]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	f003 030f 	and.w	r3, r3, #15
 8000db8:	4950      	ldr	r1, [pc, #320]	@ (8000efc <HAL_RCC_OscConfig+0x274>)
 8000dba:	5ccb      	ldrb	r3, [r1, r3]
 8000dbc:	f003 031f 	and.w	r3, r3, #31
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8000f00 <HAL_RCC_OscConfig+0x278>)
 8000dc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f04 <HAL_RCC_OscConfig+0x27c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fdb5 	bl	800093c <HAL_InitTick>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d052      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	e327      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d032      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a42      	ldr	r2, [pc, #264]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fdf2 	bl	80009dc <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fdee 	bl	80009dc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e310      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1a:	4b37      	ldr	r3, [pc, #220]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a36      	ldr	r2, [pc, #216]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	4b34      	ldr	r3, [pc, #208]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a1b      	ldr	r3, [r3, #32]
 8000e32:	4931      	ldr	r1, [pc, #196]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e34:	4313      	orrs	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e38:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	492c      	ldr	r1, [pc, #176]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
 8000e4c:	e01a      	b.n	8000e84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a29      	ldr	r2, [pc, #164]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e54:	f023 0301 	bic.w	r3, r3, #1
 8000e58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fdbf 	bl	80009dc <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e62:	f7ff fdbb 	bl	80009dc <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e2dd      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e74:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f0      	bne.n	8000e62 <HAL_RCC_OscConfig+0x1da>
 8000e80:	e000      	b.n	8000e84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d074      	beq.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d005      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x21a>
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	2b0c      	cmp	r3, #12
 8000e9a:	d10e      	bne.n	8000eba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d10b      	bne.n	8000eba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d064      	beq.n	8000f78 <HAL_RCC_OscConfig+0x2f0>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d160      	bne.n	8000f78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e2ba      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x24a>
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e026      	b.n	8000f20 <HAL_RCC_OscConfig+0x298>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eda:	d115      	bne.n	8000f08 <HAL_RCC_OscConfig+0x280>
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a02      	ldr	r2, [pc, #8]	@ (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e014      	b.n	8000f20 <HAL_RCC_OscConfig+0x298>
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	08002204 	.word	0x08002204
 8000f00:	20000004 	.word	0x20000004
 8000f04:	20000008 	.word	0x20000008
 8000f08:	4ba0      	ldr	r3, [pc, #640]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a9f      	ldr	r2, [pc, #636]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b9d      	ldr	r3, [pc, #628]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a9c      	ldr	r2, [pc, #624]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d013      	beq.n	8000f50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f28:	f7ff fd58 	bl	80009dc <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fd54 	bl	80009dc <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	@ 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e276      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f42:	4b92      	ldr	r3, [pc, #584]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0x2a8>
 8000f4e:	e014      	b.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f50:	f7ff fd44 	bl	80009dc <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fd40 	bl	80009dc <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	@ 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e262      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f6a:	4b88      	ldr	r3, [pc, #544]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x2d0>
 8000f76:	e000      	b.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d060      	beq.n	8001048 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_OscConfig+0x310>
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d119      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d116      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f98:	4b7c      	ldr	r3, [pc, #496]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x328>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e23f      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb0:	4b76      	ldr	r3, [pc, #472]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	061b      	lsls	r3, r3, #24
 8000fbe:	4973      	ldr	r1, [pc, #460]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc4:	e040      	b.n	8001048 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d023      	beq.n	8001016 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fce:	4b6f      	ldr	r3, [pc, #444]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fda:	f7ff fcff 	bl	80009dc <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fcfb 	bl	80009dc <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e21d      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff4:	4b65      	ldr	r3, [pc, #404]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001000:	4b62      	ldr	r3, [pc, #392]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	061b      	lsls	r3, r3, #24
 800100e:	495f      	ldr	r1, [pc, #380]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
 8001014:	e018      	b.n	8001048 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001016:	4b5d      	ldr	r3, [pc, #372]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a5c      	ldr	r2, [pc, #368]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 800101c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001022:	f7ff fcdb 	bl	80009dc <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fcd7 	bl	80009dc <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e1f9      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800103c:	4b53      	ldr	r3, [pc, #332]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f0      	bne.n	800102a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d03c      	beq.n	80010ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d01c      	beq.n	8001096 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105c:	4b4b      	ldr	r3, [pc, #300]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001062:	4a4a      	ldr	r2, [pc, #296]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106c:	f7ff fcb6 	bl	80009dc <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fcb2 	bl	80009dc <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e1d4      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001086:	4b41      	ldr	r3, [pc, #260]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0ef      	beq.n	8001074 <HAL_RCC_OscConfig+0x3ec>
 8001094:	e01b      	b.n	80010ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001096:	4b3d      	ldr	r3, [pc, #244]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800109c:	4a3b      	ldr	r2, [pc, #236]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a6:	f7ff fc99 	bl	80009dc <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ae:	f7ff fc95 	bl	80009dc <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e1b7      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c0:	4b32      	ldr	r3, [pc, #200]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 80010c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1ef      	bne.n	80010ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80a6 	beq.w	8001228 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10d      	bne.n	8001108 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	4b27      	ldr	r3, [pc, #156]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	4a26      	ldr	r2, [pc, #152]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f8:	4b24      	ldr	r3, [pc, #144]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001104:	2301      	movs	r3, #1
 8001106:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001108:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <HAL_RCC_OscConfig+0x508>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d118      	bne.n	8001146 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_RCC_OscConfig+0x508>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <HAL_RCC_OscConfig+0x508>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001120:	f7ff fc5c 	bl	80009dc <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001128:	f7ff fc58 	bl	80009dc <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e17a      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_RCC_OscConfig+0x508>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <HAL_RCC_OscConfig+0x4d8>
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800115e:	e029      	b.n	80011b4 <HAL_RCC_OscConfig+0x52c>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d115      	bne.n	8001194 <HAL_RCC_OscConfig+0x50c>
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 800116a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800116e:	4a07      	ldr	r2, [pc, #28]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 800117a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800117e:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_RCC_OscConfig+0x504>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001188:	e014      	b.n	80011b4 <HAL_RCC_OscConfig+0x52c>
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40007000 	.word	0x40007000
 8001194:	4b9c      	ldr	r3, [pc, #624]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800119a:	4a9b      	ldr	r2, [pc, #620]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011a4:	4b98      	ldr	r3, [pc, #608]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011aa:	4a97      	ldr	r2, [pc, #604]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d016      	beq.n	80011ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011bc:	f7ff fc0e 	bl	80009dc <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011c2:	e00a      	b.n	80011da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c4:	f7ff fc0a 	bl	80009dc <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e12a      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011da:	4b8b      	ldr	r3, [pc, #556]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80011dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0ed      	beq.n	80011c4 <HAL_RCC_OscConfig+0x53c>
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff fbf7 	bl	80009dc <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff fbf3 	bl	80009dc <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e113      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001208:	4b7f      	ldr	r3, [pc, #508]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1ed      	bne.n	80011f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d105      	bne.n	8001228 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800121c:	4b7a      	ldr	r3, [pc, #488]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001220:	4a79      	ldr	r2, [pc, #484]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 8001222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001226:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80fe 	beq.w	800142e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001236:	2b02      	cmp	r3, #2
 8001238:	f040 80d0 	bne.w	80013dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800123c:	4b72      	ldr	r3, [pc, #456]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0203 	and.w	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124c:	429a      	cmp	r2, r3
 800124e:	d130      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	3b01      	subs	r3, #1
 800125c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800125e:	429a      	cmp	r2, r3
 8001260:	d127      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800126c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800126e:	429a      	cmp	r2, r3
 8001270:	d11f      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800127c:	2a07      	cmp	r2, #7
 800127e:	bf14      	ite	ne
 8001280:	2201      	movne	r2, #1
 8001282:	2200      	moveq	r2, #0
 8001284:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001286:	4293      	cmp	r3, r2
 8001288:	d113      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001294:	085b      	lsrs	r3, r3, #1
 8001296:	3b01      	subs	r3, #1
 8001298:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800129a:	429a      	cmp	r2, r3
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	3b01      	subs	r3, #1
 80012ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d06e      	beq.n	8001390 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	d069      	beq.n	800138c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012b8:	4b53      	ldr	r3, [pc, #332]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d105      	bne.n	80012d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012c4:	4b50      	ldr	r3, [pc, #320]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0ad      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80012da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012e0:	f7ff fb7c 	bl	80009dc <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fb78 	bl	80009dc <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e09a      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fa:	4b43      	ldr	r3, [pc, #268]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001306:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	4b40      	ldr	r3, [pc, #256]	@ (800140c <HAL_RCC_OscConfig+0x784>)
 800130c:	4013      	ands	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001316:	3a01      	subs	r2, #1
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	4311      	orrs	r1, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001320:	0212      	lsls	r2, r2, #8
 8001322:	4311      	orrs	r1, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001328:	0852      	lsrs	r2, r2, #1
 800132a:	3a01      	subs	r2, #1
 800132c:	0552      	lsls	r2, r2, #21
 800132e:	4311      	orrs	r1, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001334:	0852      	lsrs	r2, r2, #1
 8001336:	3a01      	subs	r2, #1
 8001338:	0652      	lsls	r2, r2, #25
 800133a:	4311      	orrs	r1, r2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001340:	0912      	lsrs	r2, r2, #4
 8001342:	0452      	lsls	r2, r2, #17
 8001344:	430a      	orrs	r2, r1
 8001346:	4930      	ldr	r1, [pc, #192]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 8001348:	4313      	orrs	r3, r2
 800134a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800134c:	4b2e      	ldr	r3, [pc, #184]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2d      	ldr	r2, [pc, #180]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 8001352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001356:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001358:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4a2a      	ldr	r2, [pc, #168]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 800135e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001362:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001364:	f7ff fb3a 	bl	80009dc <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fb36 	bl	80009dc <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e058      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137e:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138a:	e050      	b.n	800142e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e04f      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d148      	bne.n	800142e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a19      	ldr	r2, [pc, #100]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80013a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4a16      	ldr	r2, [pc, #88]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80013ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013b4:	f7ff fb12 	bl	80009dc <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff fb0e 	bl	80009dc <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e030      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x734>
 80013da:	e028      	b.n	800142e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2b0c      	cmp	r3, #12
 80013e0:	d023      	beq.n	800142a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <HAL_RCC_OscConfig+0x780>)
 80013e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff faf5 	bl	80009dc <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f4:	e00c      	b.n	8001410 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff faf1 	bl	80009dc <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d905      	bls.n	8001410 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e013      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
 8001408:	40021000 	.word	0x40021000
 800140c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_RCC_OscConfig+0x7b0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ec      	bne.n	80013f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_RCC_OscConfig+0x7b0>)
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	4905      	ldr	r1, [pc, #20]	@ (8001438 <HAL_RCC_OscConfig+0x7b0>)
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_RCC_OscConfig+0x7b4>)
 8001424:	4013      	ands	r3, r2
 8001426:	60cb      	str	r3, [r1, #12]
 8001428:	e001      	b.n	800142e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40021000 	.word	0x40021000
 800143c:	feeefffc 	.word	0xfeeefffc

08001440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0e7      	b.n	8001624 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001454:	4b75      	ldr	r3, [pc, #468]	@ (800162c <HAL_RCC_ClockConfig+0x1ec>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d910      	bls.n	8001484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b72      	ldr	r3, [pc, #456]	@ (800162c <HAL_RCC_ClockConfig+0x1ec>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 0207 	bic.w	r2, r3, #7
 800146a:	4970      	ldr	r1, [pc, #448]	@ (800162c <HAL_RCC_ClockConfig+0x1ec>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001472:	4b6e      	ldr	r3, [pc, #440]	@ (800162c <HAL_RCC_ClockConfig+0x1ec>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0cf      	b.n	8001624 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d010      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	4b66      	ldr	r3, [pc, #408]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800149c:	429a      	cmp	r2, r3
 800149e:	d908      	bls.n	80014b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a0:	4b63      	ldr	r3, [pc, #396]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4960      	ldr	r1, [pc, #384]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d04c      	beq.n	8001558 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d121      	bne.n	8001516 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0a6      	b.n	8001624 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014de:	4b54      	ldr	r3, [pc, #336]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d115      	bne.n	8001516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e09a      	b.n	8001624 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e08e      	b.n	8001624 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001506:	4b4a      	ldr	r3, [pc, #296]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e086      	b.n	8001624 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001516:	4b46      	ldr	r3, [pc, #280]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f023 0203 	bic.w	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4943      	ldr	r1, [pc, #268]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001528:	f7ff fa58 	bl	80009dc <HAL_GetTick>
 800152c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	e00a      	b.n	8001546 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f7ff fa54 	bl	80009dc <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e06e      	b.n	8001624 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	4b3a      	ldr	r3, [pc, #232]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 020c 	and.w	r2, r3, #12
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	429a      	cmp	r2, r3
 8001556:	d1eb      	bne.n	8001530 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d010      	beq.n	8001586 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001570:	429a      	cmp	r2, r3
 8001572:	d208      	bcs.n	8001586 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	492b      	ldr	r1, [pc, #172]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001586:	4b29      	ldr	r3, [pc, #164]	@ (800162c <HAL_RCC_ClockConfig+0x1ec>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d210      	bcs.n	80015b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <HAL_RCC_ClockConfig+0x1ec>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 0207 	bic.w	r2, r3, #7
 800159c:	4923      	ldr	r1, [pc, #140]	@ (800162c <HAL_RCC_ClockConfig+0x1ec>)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a4:	4b21      	ldr	r3, [pc, #132]	@ (800162c <HAL_RCC_ClockConfig+0x1ec>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e036      	b.n	8001624 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d008      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	4918      	ldr	r1, [pc, #96]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4910      	ldr	r1, [pc, #64]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f4:	f000 f824 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_RCC_ClockConfig+0x1f0>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	490b      	ldr	r1, [pc, #44]	@ (8001634 <HAL_RCC_ClockConfig+0x1f4>)
 8001606:	5ccb      	ldrb	r3, [r1, r3]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <HAL_RCC_ClockConfig+0x1f8>)
 8001612:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_RCC_ClockConfig+0x1fc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f98f 	bl	800093c <HAL_InitTick>
 800161e:	4603      	mov	r3, r0
 8001620:	72fb      	strb	r3, [r7, #11]

  return status;
 8001622:	7afb      	ldrb	r3, [r7, #11]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40022000 	.word	0x40022000
 8001630:	40021000 	.word	0x40021000
 8001634:	08002204 	.word	0x08002204
 8001638:	20000004 	.word	0x20000004
 800163c:	20000008 	.word	0x20000008

08001640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164e:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001658:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x34>
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d121      	bne.n	80016b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d11e      	bne.n	80016b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001674:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001680:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 8001682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e005      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001690:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800169c:	4a2b      	ldr	r2, [pc, #172]	@ (800174c <HAL_RCC_GetSysClockFreq+0x10c>)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10d      	bne.n	80016c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d102      	bne.n	80016be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016b8:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	e004      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016c4:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x114>)
 80016c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d134      	bne.n	8001738 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d003      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d003      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0xac>
 80016e4:	e005      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x110>)
 80016e8:	617b      	str	r3, [r7, #20]
      break;
 80016ea:	e005      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x114>)
 80016ee:	617b      	str	r3, [r7, #20]
      break;
 80016f0:	e002      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	617b      	str	r3, [r7, #20]
      break;
 80016f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	3301      	adds	r3, #1
 8001704:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	fb03 f202 	mul.w	r2, r3, r2
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x108>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	0e5b      	lsrs	r3, r3, #25
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	3301      	adds	r3, #1
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001738:	69bb      	ldr	r3, [r7, #24]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	@ 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	08002214 	.word	0x08002214
 8001750:	00f42400 	.word	0x00f42400
 8001754:	007a1200 	.word	0x007a1200

08001758 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001764:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001770:	f7ff fa26 	bl	8000bc0 <HAL_PWREx_GetVoltageRange>
 8001774:	6178      	str	r0, [r7, #20]
 8001776:	e014      	b.n	80017a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177c:	4a24      	ldr	r2, [pc, #144]	@ (8001810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	@ 0x58
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001790:	f7ff fa16 	bl	8000bc0 <HAL_PWREx_GetVoltageRange>
 8001794:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	4a1d      	ldr	r2, [pc, #116]	@ (8001810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017a8:	d10b      	bne.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b80      	cmp	r3, #128	@ 0x80
 80017ae:	d919      	bls.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80017b4:	d902      	bls.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017b6:	2302      	movs	r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	e013      	b.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	e010      	b.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b80      	cmp	r3, #128	@ 0x80
 80017c6:	d902      	bls.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017c8:	2303      	movs	r3, #3
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	e00a      	b.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b80      	cmp	r3, #128	@ 0x80
 80017d2:	d102      	bne.n	80017da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	e004      	b.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b70      	cmp	r3, #112	@ 0x70
 80017de:	d101      	bne.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017e0:	2301      	movs	r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 0207 	bic.w	r2, r3, #7
 80017ec:	4909      	ldr	r1, [pc, #36]	@ (8001814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d001      	beq.n	8001806 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	40022000 	.word	0x40022000

08001818 <siprintf>:
 8001818:	b40e      	push	{r1, r2, r3}
 800181a:	b500      	push	{lr}
 800181c:	b09c      	sub	sp, #112	@ 0x70
 800181e:	ab1d      	add	r3, sp, #116	@ 0x74
 8001820:	9002      	str	r0, [sp, #8]
 8001822:	9006      	str	r0, [sp, #24]
 8001824:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001828:	4809      	ldr	r0, [pc, #36]	@ (8001850 <siprintf+0x38>)
 800182a:	9107      	str	r1, [sp, #28]
 800182c:	9104      	str	r1, [sp, #16]
 800182e:	4909      	ldr	r1, [pc, #36]	@ (8001854 <siprintf+0x3c>)
 8001830:	f853 2b04 	ldr.w	r2, [r3], #4
 8001834:	9105      	str	r1, [sp, #20]
 8001836:	6800      	ldr	r0, [r0, #0]
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	a902      	add	r1, sp, #8
 800183c:	f000 f89c 	bl	8001978 <_svfiprintf_r>
 8001840:	9b02      	ldr	r3, [sp, #8]
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	b01c      	add	sp, #112	@ 0x70
 8001848:	f85d eb04 	ldr.w	lr, [sp], #4
 800184c:	b003      	add	sp, #12
 800184e:	4770      	bx	lr
 8001850:	20000010 	.word	0x20000010
 8001854:	ffff0208 	.word	0xffff0208

08001858 <memset>:
 8001858:	4402      	add	r2, r0
 800185a:	4603      	mov	r3, r0
 800185c:	4293      	cmp	r3, r2
 800185e:	d100      	bne.n	8001862 <memset+0xa>
 8001860:	4770      	bx	lr
 8001862:	f803 1b01 	strb.w	r1, [r3], #1
 8001866:	e7f9      	b.n	800185c <memset+0x4>

08001868 <__errno>:
 8001868:	4b01      	ldr	r3, [pc, #4]	@ (8001870 <__errno+0x8>)
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000010 	.word	0x20000010

08001874 <__libc_init_array>:
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	4d0d      	ldr	r5, [pc, #52]	@ (80018ac <__libc_init_array+0x38>)
 8001878:	4c0d      	ldr	r4, [pc, #52]	@ (80018b0 <__libc_init_array+0x3c>)
 800187a:	1b64      	subs	r4, r4, r5
 800187c:	10a4      	asrs	r4, r4, #2
 800187e:	2600      	movs	r6, #0
 8001880:	42a6      	cmp	r6, r4
 8001882:	d109      	bne.n	8001898 <__libc_init_array+0x24>
 8001884:	4d0b      	ldr	r5, [pc, #44]	@ (80018b4 <__libc_init_array+0x40>)
 8001886:	4c0c      	ldr	r4, [pc, #48]	@ (80018b8 <__libc_init_array+0x44>)
 8001888:	f000 fc66 	bl	8002158 <_init>
 800188c:	1b64      	subs	r4, r4, r5
 800188e:	10a4      	asrs	r4, r4, #2
 8001890:	2600      	movs	r6, #0
 8001892:	42a6      	cmp	r6, r4
 8001894:	d105      	bne.n	80018a2 <__libc_init_array+0x2e>
 8001896:	bd70      	pop	{r4, r5, r6, pc}
 8001898:	f855 3b04 	ldr.w	r3, [r5], #4
 800189c:	4798      	blx	r3
 800189e:	3601      	adds	r6, #1
 80018a0:	e7ee      	b.n	8001880 <__libc_init_array+0xc>
 80018a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a6:	4798      	blx	r3
 80018a8:	3601      	adds	r6, #1
 80018aa:	e7f2      	b.n	8001892 <__libc_init_array+0x1e>
 80018ac:	08002280 	.word	0x08002280
 80018b0:	08002280 	.word	0x08002280
 80018b4:	08002280 	.word	0x08002280
 80018b8:	08002284 	.word	0x08002284

080018bc <__retarget_lock_acquire_recursive>:
 80018bc:	4770      	bx	lr

080018be <__retarget_lock_release_recursive>:
 80018be:	4770      	bx	lr

080018c0 <__ssputs_r>:
 80018c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018c4:	688e      	ldr	r6, [r1, #8]
 80018c6:	461f      	mov	r7, r3
 80018c8:	42be      	cmp	r6, r7
 80018ca:	680b      	ldr	r3, [r1, #0]
 80018cc:	4682      	mov	sl, r0
 80018ce:	460c      	mov	r4, r1
 80018d0:	4690      	mov	r8, r2
 80018d2:	d82d      	bhi.n	8001930 <__ssputs_r+0x70>
 80018d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80018dc:	d026      	beq.n	800192c <__ssputs_r+0x6c>
 80018de:	6965      	ldr	r5, [r4, #20]
 80018e0:	6909      	ldr	r1, [r1, #16]
 80018e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018e6:	eba3 0901 	sub.w	r9, r3, r1
 80018ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80018ee:	1c7b      	adds	r3, r7, #1
 80018f0:	444b      	add	r3, r9
 80018f2:	106d      	asrs	r5, r5, #1
 80018f4:	429d      	cmp	r5, r3
 80018f6:	bf38      	it	cc
 80018f8:	461d      	movcc	r5, r3
 80018fa:	0553      	lsls	r3, r2, #21
 80018fc:	d527      	bpl.n	800194e <__ssputs_r+0x8e>
 80018fe:	4629      	mov	r1, r5
 8001900:	f000 f958 	bl	8001bb4 <_malloc_r>
 8001904:	4606      	mov	r6, r0
 8001906:	b360      	cbz	r0, 8001962 <__ssputs_r+0xa2>
 8001908:	6921      	ldr	r1, [r4, #16]
 800190a:	464a      	mov	r2, r9
 800190c:	f000 fbc4 	bl	8002098 <memcpy>
 8001910:	89a3      	ldrh	r3, [r4, #12]
 8001912:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800191a:	81a3      	strh	r3, [r4, #12]
 800191c:	6126      	str	r6, [r4, #16]
 800191e:	6165      	str	r5, [r4, #20]
 8001920:	444e      	add	r6, r9
 8001922:	eba5 0509 	sub.w	r5, r5, r9
 8001926:	6026      	str	r6, [r4, #0]
 8001928:	60a5      	str	r5, [r4, #8]
 800192a:	463e      	mov	r6, r7
 800192c:	42be      	cmp	r6, r7
 800192e:	d900      	bls.n	8001932 <__ssputs_r+0x72>
 8001930:	463e      	mov	r6, r7
 8001932:	6820      	ldr	r0, [r4, #0]
 8001934:	4632      	mov	r2, r6
 8001936:	4641      	mov	r1, r8
 8001938:	f000 fb84 	bl	8002044 <memmove>
 800193c:	68a3      	ldr	r3, [r4, #8]
 800193e:	1b9b      	subs	r3, r3, r6
 8001940:	60a3      	str	r3, [r4, #8]
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	4433      	add	r3, r6
 8001946:	6023      	str	r3, [r4, #0]
 8001948:	2000      	movs	r0, #0
 800194a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800194e:	462a      	mov	r2, r5
 8001950:	f000 fb4a 	bl	8001fe8 <_realloc_r>
 8001954:	4606      	mov	r6, r0
 8001956:	2800      	cmp	r0, #0
 8001958:	d1e0      	bne.n	800191c <__ssputs_r+0x5c>
 800195a:	6921      	ldr	r1, [r4, #16]
 800195c:	4650      	mov	r0, sl
 800195e:	f000 fba9 	bl	80020b4 <_free_r>
 8001962:	230c      	movs	r3, #12
 8001964:	f8ca 3000 	str.w	r3, [sl]
 8001968:	89a3      	ldrh	r3, [r4, #12]
 800196a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800196e:	81a3      	strh	r3, [r4, #12]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001974:	e7e9      	b.n	800194a <__ssputs_r+0x8a>
	...

08001978 <_svfiprintf_r>:
 8001978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800197c:	4698      	mov	r8, r3
 800197e:	898b      	ldrh	r3, [r1, #12]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	b09d      	sub	sp, #116	@ 0x74
 8001984:	4607      	mov	r7, r0
 8001986:	460d      	mov	r5, r1
 8001988:	4614      	mov	r4, r2
 800198a:	d510      	bpl.n	80019ae <_svfiprintf_r+0x36>
 800198c:	690b      	ldr	r3, [r1, #16]
 800198e:	b973      	cbnz	r3, 80019ae <_svfiprintf_r+0x36>
 8001990:	2140      	movs	r1, #64	@ 0x40
 8001992:	f000 f90f 	bl	8001bb4 <_malloc_r>
 8001996:	6028      	str	r0, [r5, #0]
 8001998:	6128      	str	r0, [r5, #16]
 800199a:	b930      	cbnz	r0, 80019aa <_svfiprintf_r+0x32>
 800199c:	230c      	movs	r3, #12
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019a4:	b01d      	add	sp, #116	@ 0x74
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019aa:	2340      	movs	r3, #64	@ 0x40
 80019ac:	616b      	str	r3, [r5, #20]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80019b2:	2320      	movs	r3, #32
 80019b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80019bc:	2330      	movs	r3, #48	@ 0x30
 80019be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001b5c <_svfiprintf_r+0x1e4>
 80019c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019c6:	f04f 0901 	mov.w	r9, #1
 80019ca:	4623      	mov	r3, r4
 80019cc:	469a      	mov	sl, r3
 80019ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019d2:	b10a      	cbz	r2, 80019d8 <_svfiprintf_r+0x60>
 80019d4:	2a25      	cmp	r2, #37	@ 0x25
 80019d6:	d1f9      	bne.n	80019cc <_svfiprintf_r+0x54>
 80019d8:	ebba 0b04 	subs.w	fp, sl, r4
 80019dc:	d00b      	beq.n	80019f6 <_svfiprintf_r+0x7e>
 80019de:	465b      	mov	r3, fp
 80019e0:	4622      	mov	r2, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	4638      	mov	r0, r7
 80019e6:	f7ff ff6b 	bl	80018c0 <__ssputs_r>
 80019ea:	3001      	adds	r0, #1
 80019ec:	f000 80a7 	beq.w	8001b3e <_svfiprintf_r+0x1c6>
 80019f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019f2:	445a      	add	r2, fp
 80019f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80019f6:	f89a 3000 	ldrb.w	r3, [sl]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 809f 	beq.w	8001b3e <_svfiprintf_r+0x1c6>
 8001a00:	2300      	movs	r3, #0
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a0a:	f10a 0a01 	add.w	sl, sl, #1
 8001a0e:	9304      	str	r3, [sp, #16]
 8001a10:	9307      	str	r3, [sp, #28]
 8001a12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a16:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a18:	4654      	mov	r4, sl
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a20:	484e      	ldr	r0, [pc, #312]	@ (8001b5c <_svfiprintf_r+0x1e4>)
 8001a22:	f7fe fbd5 	bl	80001d0 <memchr>
 8001a26:	9a04      	ldr	r2, [sp, #16]
 8001a28:	b9d8      	cbnz	r0, 8001a62 <_svfiprintf_r+0xea>
 8001a2a:	06d0      	lsls	r0, r2, #27
 8001a2c:	bf44      	itt	mi
 8001a2e:	2320      	movmi	r3, #32
 8001a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a34:	0711      	lsls	r1, r2, #28
 8001a36:	bf44      	itt	mi
 8001a38:	232b      	movmi	r3, #43	@ 0x2b
 8001a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a44:	d015      	beq.n	8001a72 <_svfiprintf_r+0xfa>
 8001a46:	9a07      	ldr	r2, [sp, #28]
 8001a48:	4654      	mov	r4, sl
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f04f 0c0a 	mov.w	ip, #10
 8001a50:	4621      	mov	r1, r4
 8001a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a56:	3b30      	subs	r3, #48	@ 0x30
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d94b      	bls.n	8001af4 <_svfiprintf_r+0x17c>
 8001a5c:	b1b0      	cbz	r0, 8001a8c <_svfiprintf_r+0x114>
 8001a5e:	9207      	str	r2, [sp, #28]
 8001a60:	e014      	b.n	8001a8c <_svfiprintf_r+0x114>
 8001a62:	eba0 0308 	sub.w	r3, r0, r8
 8001a66:	fa09 f303 	lsl.w	r3, r9, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	9304      	str	r3, [sp, #16]
 8001a6e:	46a2      	mov	sl, r4
 8001a70:	e7d2      	b.n	8001a18 <_svfiprintf_r+0xa0>
 8001a72:	9b03      	ldr	r3, [sp, #12]
 8001a74:	1d19      	adds	r1, r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	9103      	str	r1, [sp, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bfbb      	ittet	lt
 8001a7e:	425b      	neglt	r3, r3
 8001a80:	f042 0202 	orrlt.w	r2, r2, #2
 8001a84:	9307      	strge	r3, [sp, #28]
 8001a86:	9307      	strlt	r3, [sp, #28]
 8001a88:	bfb8      	it	lt
 8001a8a:	9204      	strlt	r2, [sp, #16]
 8001a8c:	7823      	ldrb	r3, [r4, #0]
 8001a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a90:	d10a      	bne.n	8001aa8 <_svfiprintf_r+0x130>
 8001a92:	7863      	ldrb	r3, [r4, #1]
 8001a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a96:	d132      	bne.n	8001afe <_svfiprintf_r+0x186>
 8001a98:	9b03      	ldr	r3, [sp, #12]
 8001a9a:	1d1a      	adds	r2, r3, #4
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	9203      	str	r2, [sp, #12]
 8001aa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001aa4:	3402      	adds	r4, #2
 8001aa6:	9305      	str	r3, [sp, #20]
 8001aa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001b6c <_svfiprintf_r+0x1f4>
 8001aac:	7821      	ldrb	r1, [r4, #0]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	4650      	mov	r0, sl
 8001ab2:	f7fe fb8d 	bl	80001d0 <memchr>
 8001ab6:	b138      	cbz	r0, 8001ac8 <_svfiprintf_r+0x150>
 8001ab8:	9b04      	ldr	r3, [sp, #16]
 8001aba:	eba0 000a 	sub.w	r0, r0, sl
 8001abe:	2240      	movs	r2, #64	@ 0x40
 8001ac0:	4082      	lsls	r2, r0
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	3401      	adds	r4, #1
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001acc:	4824      	ldr	r0, [pc, #144]	@ (8001b60 <_svfiprintf_r+0x1e8>)
 8001ace:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001ad2:	2206      	movs	r2, #6
 8001ad4:	f7fe fb7c 	bl	80001d0 <memchr>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d036      	beq.n	8001b4a <_svfiprintf_r+0x1d2>
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <_svfiprintf_r+0x1ec>)
 8001ade:	bb1b      	cbnz	r3, 8001b28 <_svfiprintf_r+0x1b0>
 8001ae0:	9b03      	ldr	r3, [sp, #12]
 8001ae2:	3307      	adds	r3, #7
 8001ae4:	f023 0307 	bic.w	r3, r3, #7
 8001ae8:	3308      	adds	r3, #8
 8001aea:	9303      	str	r3, [sp, #12]
 8001aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001aee:	4433      	add	r3, r6
 8001af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001af2:	e76a      	b.n	80019ca <_svfiprintf_r+0x52>
 8001af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001af8:	460c      	mov	r4, r1
 8001afa:	2001      	movs	r0, #1
 8001afc:	e7a8      	b.n	8001a50 <_svfiprintf_r+0xd8>
 8001afe:	2300      	movs	r3, #0
 8001b00:	3401      	adds	r4, #1
 8001b02:	9305      	str	r3, [sp, #20]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 0c0a 	mov.w	ip, #10
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b10:	3a30      	subs	r2, #48	@ 0x30
 8001b12:	2a09      	cmp	r2, #9
 8001b14:	d903      	bls.n	8001b1e <_svfiprintf_r+0x1a6>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0c6      	beq.n	8001aa8 <_svfiprintf_r+0x130>
 8001b1a:	9105      	str	r1, [sp, #20]
 8001b1c:	e7c4      	b.n	8001aa8 <_svfiprintf_r+0x130>
 8001b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b22:	4604      	mov	r4, r0
 8001b24:	2301      	movs	r3, #1
 8001b26:	e7f0      	b.n	8001b0a <_svfiprintf_r+0x192>
 8001b28:	ab03      	add	r3, sp, #12
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	462a      	mov	r2, r5
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <_svfiprintf_r+0x1f0>)
 8001b30:	a904      	add	r1, sp, #16
 8001b32:	4638      	mov	r0, r7
 8001b34:	f3af 8000 	nop.w
 8001b38:	1c42      	adds	r2, r0, #1
 8001b3a:	4606      	mov	r6, r0
 8001b3c:	d1d6      	bne.n	8001aec <_svfiprintf_r+0x174>
 8001b3e:	89ab      	ldrh	r3, [r5, #12]
 8001b40:	065b      	lsls	r3, r3, #25
 8001b42:	f53f af2d 	bmi.w	80019a0 <_svfiprintf_r+0x28>
 8001b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b48:	e72c      	b.n	80019a4 <_svfiprintf_r+0x2c>
 8001b4a:	ab03      	add	r3, sp, #12
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	462a      	mov	r2, r5
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <_svfiprintf_r+0x1f0>)
 8001b52:	a904      	add	r1, sp, #16
 8001b54:	4638      	mov	r0, r7
 8001b56:	f000 f91b 	bl	8001d90 <_printf_i>
 8001b5a:	e7ed      	b.n	8001b38 <_svfiprintf_r+0x1c0>
 8001b5c:	08002244 	.word	0x08002244
 8001b60:	0800224e 	.word	0x0800224e
 8001b64:	00000000 	.word	0x00000000
 8001b68:	080018c1 	.word	0x080018c1
 8001b6c:	0800224a 	.word	0x0800224a

08001b70 <sbrk_aligned>:
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4e0f      	ldr	r6, [pc, #60]	@ (8001bb0 <sbrk_aligned+0x40>)
 8001b74:	460c      	mov	r4, r1
 8001b76:	6831      	ldr	r1, [r6, #0]
 8001b78:	4605      	mov	r5, r0
 8001b7a:	b911      	cbnz	r1, 8001b82 <sbrk_aligned+0x12>
 8001b7c:	f000 fa7c 	bl	8002078 <_sbrk_r>
 8001b80:	6030      	str	r0, [r6, #0]
 8001b82:	4621      	mov	r1, r4
 8001b84:	4628      	mov	r0, r5
 8001b86:	f000 fa77 	bl	8002078 <_sbrk_r>
 8001b8a:	1c43      	adds	r3, r0, #1
 8001b8c:	d103      	bne.n	8001b96 <sbrk_aligned+0x26>
 8001b8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001b92:	4620      	mov	r0, r4
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	1cc4      	adds	r4, r0, #3
 8001b98:	f024 0403 	bic.w	r4, r4, #3
 8001b9c:	42a0      	cmp	r0, r4
 8001b9e:	d0f8      	beq.n	8001b92 <sbrk_aligned+0x22>
 8001ba0:	1a21      	subs	r1, r4, r0
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f000 fa68 	bl	8002078 <_sbrk_r>
 8001ba8:	3001      	adds	r0, #1
 8001baa:	d1f2      	bne.n	8001b92 <sbrk_aligned+0x22>
 8001bac:	e7ef      	b.n	8001b8e <sbrk_aligned+0x1e>
 8001bae:	bf00      	nop
 8001bb0:	200001c0 	.word	0x200001c0

08001bb4 <_malloc_r>:
 8001bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bb8:	1ccd      	adds	r5, r1, #3
 8001bba:	f025 0503 	bic.w	r5, r5, #3
 8001bbe:	3508      	adds	r5, #8
 8001bc0:	2d0c      	cmp	r5, #12
 8001bc2:	bf38      	it	cc
 8001bc4:	250c      	movcc	r5, #12
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	4606      	mov	r6, r0
 8001bca:	db01      	blt.n	8001bd0 <_malloc_r+0x1c>
 8001bcc:	42a9      	cmp	r1, r5
 8001bce:	d904      	bls.n	8001bda <_malloc_r+0x26>
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	6033      	str	r3, [r6, #0]
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001cb0 <_malloc_r+0xfc>
 8001bde:	f000 f9f7 	bl	8001fd0 <__malloc_lock>
 8001be2:	f8d8 3000 	ldr.w	r3, [r8]
 8001be6:	461c      	mov	r4, r3
 8001be8:	bb44      	cbnz	r4, 8001c3c <_malloc_r+0x88>
 8001bea:	4629      	mov	r1, r5
 8001bec:	4630      	mov	r0, r6
 8001bee:	f7ff ffbf 	bl	8001b70 <sbrk_aligned>
 8001bf2:	1c43      	adds	r3, r0, #1
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	d158      	bne.n	8001caa <_malloc_r+0xf6>
 8001bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8001bfc:	4627      	mov	r7, r4
 8001bfe:	2f00      	cmp	r7, #0
 8001c00:	d143      	bne.n	8001c8a <_malloc_r+0xd6>
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d04b      	beq.n	8001c9e <_malloc_r+0xea>
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	4639      	mov	r1, r7
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	eb04 0903 	add.w	r9, r4, r3
 8001c10:	f000 fa32 	bl	8002078 <_sbrk_r>
 8001c14:	4581      	cmp	r9, r0
 8001c16:	d142      	bne.n	8001c9e <_malloc_r+0xea>
 8001c18:	6821      	ldr	r1, [r4, #0]
 8001c1a:	1a6d      	subs	r5, r5, r1
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f7ff ffa6 	bl	8001b70 <sbrk_aligned>
 8001c24:	3001      	adds	r0, #1
 8001c26:	d03a      	beq.n	8001c9e <_malloc_r+0xea>
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	442b      	add	r3, r5
 8001c2c:	6023      	str	r3, [r4, #0]
 8001c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	bb62      	cbnz	r2, 8001c90 <_malloc_r+0xdc>
 8001c36:	f8c8 7000 	str.w	r7, [r8]
 8001c3a:	e00f      	b.n	8001c5c <_malloc_r+0xa8>
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	1b52      	subs	r2, r2, r5
 8001c40:	d420      	bmi.n	8001c84 <_malloc_r+0xd0>
 8001c42:	2a0b      	cmp	r2, #11
 8001c44:	d917      	bls.n	8001c76 <_malloc_r+0xc2>
 8001c46:	1961      	adds	r1, r4, r5
 8001c48:	42a3      	cmp	r3, r4
 8001c4a:	6025      	str	r5, [r4, #0]
 8001c4c:	bf18      	it	ne
 8001c4e:	6059      	strne	r1, [r3, #4]
 8001c50:	6863      	ldr	r3, [r4, #4]
 8001c52:	bf08      	it	eq
 8001c54:	f8c8 1000 	streq.w	r1, [r8]
 8001c58:	5162      	str	r2, [r4, r5]
 8001c5a:	604b      	str	r3, [r1, #4]
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f000 f9bd 	bl	8001fdc <__malloc_unlock>
 8001c62:	f104 000b 	add.w	r0, r4, #11
 8001c66:	1d23      	adds	r3, r4, #4
 8001c68:	f020 0007 	bic.w	r0, r0, #7
 8001c6c:	1ac2      	subs	r2, r0, r3
 8001c6e:	bf1c      	itt	ne
 8001c70:	1a1b      	subne	r3, r3, r0
 8001c72:	50a3      	strne	r3, [r4, r2]
 8001c74:	e7af      	b.n	8001bd6 <_malloc_r+0x22>
 8001c76:	6862      	ldr	r2, [r4, #4]
 8001c78:	42a3      	cmp	r3, r4
 8001c7a:	bf0c      	ite	eq
 8001c7c:	f8c8 2000 	streq.w	r2, [r8]
 8001c80:	605a      	strne	r2, [r3, #4]
 8001c82:	e7eb      	b.n	8001c5c <_malloc_r+0xa8>
 8001c84:	4623      	mov	r3, r4
 8001c86:	6864      	ldr	r4, [r4, #4]
 8001c88:	e7ae      	b.n	8001be8 <_malloc_r+0x34>
 8001c8a:	463c      	mov	r4, r7
 8001c8c:	687f      	ldr	r7, [r7, #4]
 8001c8e:	e7b6      	b.n	8001bfe <_malloc_r+0x4a>
 8001c90:	461a      	mov	r2, r3
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	42a3      	cmp	r3, r4
 8001c96:	d1fb      	bne.n	8001c90 <_malloc_r+0xdc>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6053      	str	r3, [r2, #4]
 8001c9c:	e7de      	b.n	8001c5c <_malloc_r+0xa8>
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	6033      	str	r3, [r6, #0]
 8001ca2:	4630      	mov	r0, r6
 8001ca4:	f000 f99a 	bl	8001fdc <__malloc_unlock>
 8001ca8:	e794      	b.n	8001bd4 <_malloc_r+0x20>
 8001caa:	6005      	str	r5, [r0, #0]
 8001cac:	e7d6      	b.n	8001c5c <_malloc_r+0xa8>
 8001cae:	bf00      	nop
 8001cb0:	200001c4 	.word	0x200001c4

08001cb4 <_printf_common>:
 8001cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cb8:	4616      	mov	r6, r2
 8001cba:	4698      	mov	r8, r3
 8001cbc:	688a      	ldr	r2, [r1, #8]
 8001cbe:	690b      	ldr	r3, [r1, #16]
 8001cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bfb8      	it	lt
 8001cc8:	4613      	movlt	r3, r2
 8001cca:	6033      	str	r3, [r6, #0]
 8001ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001cd0:	4607      	mov	r7, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	b10a      	cbz	r2, 8001cda <_printf_common+0x26>
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	6033      	str	r3, [r6, #0]
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	0699      	lsls	r1, r3, #26
 8001cde:	bf42      	ittt	mi
 8001ce0:	6833      	ldrmi	r3, [r6, #0]
 8001ce2:	3302      	addmi	r3, #2
 8001ce4:	6033      	strmi	r3, [r6, #0]
 8001ce6:	6825      	ldr	r5, [r4, #0]
 8001ce8:	f015 0506 	ands.w	r5, r5, #6
 8001cec:	d106      	bne.n	8001cfc <_printf_common+0x48>
 8001cee:	f104 0a19 	add.w	sl, r4, #25
 8001cf2:	68e3      	ldr	r3, [r4, #12]
 8001cf4:	6832      	ldr	r2, [r6, #0]
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	dc26      	bgt.n	8001d4a <_printf_common+0x96>
 8001cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	3b00      	subs	r3, #0
 8001d04:	bf18      	it	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	0692      	lsls	r2, r2, #26
 8001d0a:	d42b      	bmi.n	8001d64 <_printf_common+0xb0>
 8001d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d10:	4641      	mov	r1, r8
 8001d12:	4638      	mov	r0, r7
 8001d14:	47c8      	blx	r9
 8001d16:	3001      	adds	r0, #1
 8001d18:	d01e      	beq.n	8001d58 <_printf_common+0xa4>
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	6922      	ldr	r2, [r4, #16]
 8001d1e:	f003 0306 	and.w	r3, r3, #6
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf02      	ittt	eq
 8001d26:	68e5      	ldreq	r5, [r4, #12]
 8001d28:	6833      	ldreq	r3, [r6, #0]
 8001d2a:	1aed      	subeq	r5, r5, r3
 8001d2c:	68a3      	ldr	r3, [r4, #8]
 8001d2e:	bf0c      	ite	eq
 8001d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d34:	2500      	movne	r5, #0
 8001d36:	4293      	cmp	r3, r2
 8001d38:	bfc4      	itt	gt
 8001d3a:	1a9b      	subgt	r3, r3, r2
 8001d3c:	18ed      	addgt	r5, r5, r3
 8001d3e:	2600      	movs	r6, #0
 8001d40:	341a      	adds	r4, #26
 8001d42:	42b5      	cmp	r5, r6
 8001d44:	d11a      	bne.n	8001d7c <_printf_common+0xc8>
 8001d46:	2000      	movs	r0, #0
 8001d48:	e008      	b.n	8001d5c <_printf_common+0xa8>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4652      	mov	r2, sl
 8001d4e:	4641      	mov	r1, r8
 8001d50:	4638      	mov	r0, r7
 8001d52:	47c8      	blx	r9
 8001d54:	3001      	adds	r0, #1
 8001d56:	d103      	bne.n	8001d60 <_printf_common+0xac>
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d60:	3501      	adds	r5, #1
 8001d62:	e7c6      	b.n	8001cf2 <_printf_common+0x3e>
 8001d64:	18e1      	adds	r1, r4, r3
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	2030      	movs	r0, #48	@ 0x30
 8001d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d6e:	4422      	add	r2, r4
 8001d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d78:	3302      	adds	r3, #2
 8001d7a:	e7c7      	b.n	8001d0c <_printf_common+0x58>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4641      	mov	r1, r8
 8001d82:	4638      	mov	r0, r7
 8001d84:	47c8      	blx	r9
 8001d86:	3001      	adds	r0, #1
 8001d88:	d0e6      	beq.n	8001d58 <_printf_common+0xa4>
 8001d8a:	3601      	adds	r6, #1
 8001d8c:	e7d9      	b.n	8001d42 <_printf_common+0x8e>
	...

08001d90 <_printf_i>:
 8001d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d94:	7e0f      	ldrb	r7, [r1, #24]
 8001d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d98:	2f78      	cmp	r7, #120	@ 0x78
 8001d9a:	4691      	mov	r9, r2
 8001d9c:	4680      	mov	r8, r0
 8001d9e:	460c      	mov	r4, r1
 8001da0:	469a      	mov	sl, r3
 8001da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001da6:	d807      	bhi.n	8001db8 <_printf_i+0x28>
 8001da8:	2f62      	cmp	r7, #98	@ 0x62
 8001daa:	d80a      	bhi.n	8001dc2 <_printf_i+0x32>
 8001dac:	2f00      	cmp	r7, #0
 8001dae:	f000 80d2 	beq.w	8001f56 <_printf_i+0x1c6>
 8001db2:	2f58      	cmp	r7, #88	@ 0x58
 8001db4:	f000 80b9 	beq.w	8001f2a <_printf_i+0x19a>
 8001db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001dc0:	e03a      	b.n	8001e38 <_printf_i+0xa8>
 8001dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001dc6:	2b15      	cmp	r3, #21
 8001dc8:	d8f6      	bhi.n	8001db8 <_printf_i+0x28>
 8001dca:	a101      	add	r1, pc, #4	@ (adr r1, 8001dd0 <_printf_i+0x40>)
 8001dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dd0:	08001e29 	.word	0x08001e29
 8001dd4:	08001e3d 	.word	0x08001e3d
 8001dd8:	08001db9 	.word	0x08001db9
 8001ddc:	08001db9 	.word	0x08001db9
 8001de0:	08001db9 	.word	0x08001db9
 8001de4:	08001db9 	.word	0x08001db9
 8001de8:	08001e3d 	.word	0x08001e3d
 8001dec:	08001db9 	.word	0x08001db9
 8001df0:	08001db9 	.word	0x08001db9
 8001df4:	08001db9 	.word	0x08001db9
 8001df8:	08001db9 	.word	0x08001db9
 8001dfc:	08001f3d 	.word	0x08001f3d
 8001e00:	08001e67 	.word	0x08001e67
 8001e04:	08001ef7 	.word	0x08001ef7
 8001e08:	08001db9 	.word	0x08001db9
 8001e0c:	08001db9 	.word	0x08001db9
 8001e10:	08001f5f 	.word	0x08001f5f
 8001e14:	08001db9 	.word	0x08001db9
 8001e18:	08001e67 	.word	0x08001e67
 8001e1c:	08001db9 	.word	0x08001db9
 8001e20:	08001db9 	.word	0x08001db9
 8001e24:	08001eff 	.word	0x08001eff
 8001e28:	6833      	ldr	r3, [r6, #0]
 8001e2a:	1d1a      	adds	r2, r3, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6032      	str	r2, [r6, #0]
 8001e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e09d      	b.n	8001f78 <_printf_i+0x1e8>
 8001e3c:	6833      	ldr	r3, [r6, #0]
 8001e3e:	6820      	ldr	r0, [r4, #0]
 8001e40:	1d19      	adds	r1, r3, #4
 8001e42:	6031      	str	r1, [r6, #0]
 8001e44:	0606      	lsls	r6, r0, #24
 8001e46:	d501      	bpl.n	8001e4c <_printf_i+0xbc>
 8001e48:	681d      	ldr	r5, [r3, #0]
 8001e4a:	e003      	b.n	8001e54 <_printf_i+0xc4>
 8001e4c:	0645      	lsls	r5, r0, #25
 8001e4e:	d5fb      	bpl.n	8001e48 <_printf_i+0xb8>
 8001e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e54:	2d00      	cmp	r5, #0
 8001e56:	da03      	bge.n	8001e60 <_printf_i+0xd0>
 8001e58:	232d      	movs	r3, #45	@ 0x2d
 8001e5a:	426d      	negs	r5, r5
 8001e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e60:	4859      	ldr	r0, [pc, #356]	@ (8001fc8 <_printf_i+0x238>)
 8001e62:	230a      	movs	r3, #10
 8001e64:	e011      	b.n	8001e8a <_printf_i+0xfa>
 8001e66:	6821      	ldr	r1, [r4, #0]
 8001e68:	6833      	ldr	r3, [r6, #0]
 8001e6a:	0608      	lsls	r0, r1, #24
 8001e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e70:	d402      	bmi.n	8001e78 <_printf_i+0xe8>
 8001e72:	0649      	lsls	r1, r1, #25
 8001e74:	bf48      	it	mi
 8001e76:	b2ad      	uxthmi	r5, r5
 8001e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e7a:	4853      	ldr	r0, [pc, #332]	@ (8001fc8 <_printf_i+0x238>)
 8001e7c:	6033      	str	r3, [r6, #0]
 8001e7e:	bf14      	ite	ne
 8001e80:	230a      	movne	r3, #10
 8001e82:	2308      	moveq	r3, #8
 8001e84:	2100      	movs	r1, #0
 8001e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e8a:	6866      	ldr	r6, [r4, #4]
 8001e8c:	60a6      	str	r6, [r4, #8]
 8001e8e:	2e00      	cmp	r6, #0
 8001e90:	bfa2      	ittt	ge
 8001e92:	6821      	ldrge	r1, [r4, #0]
 8001e94:	f021 0104 	bicge.w	r1, r1, #4
 8001e98:	6021      	strge	r1, [r4, #0]
 8001e9a:	b90d      	cbnz	r5, 8001ea0 <_printf_i+0x110>
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d04b      	beq.n	8001f38 <_printf_i+0x1a8>
 8001ea0:	4616      	mov	r6, r2
 8001ea2:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ea6:	fb03 5711 	mls	r7, r3, r1, r5
 8001eaa:	5dc7      	ldrb	r7, [r0, r7]
 8001eac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001eb0:	462f      	mov	r7, r5
 8001eb2:	42bb      	cmp	r3, r7
 8001eb4:	460d      	mov	r5, r1
 8001eb6:	d9f4      	bls.n	8001ea2 <_printf_i+0x112>
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d10b      	bne.n	8001ed4 <_printf_i+0x144>
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	07df      	lsls	r7, r3, #31
 8001ec0:	d508      	bpl.n	8001ed4 <_printf_i+0x144>
 8001ec2:	6923      	ldr	r3, [r4, #16]
 8001ec4:	6861      	ldr	r1, [r4, #4]
 8001ec6:	4299      	cmp	r1, r3
 8001ec8:	bfde      	ittt	le
 8001eca:	2330      	movle	r3, #48	@ 0x30
 8001ecc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ed0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001ed4:	1b92      	subs	r2, r2, r6
 8001ed6:	6122      	str	r2, [r4, #16]
 8001ed8:	f8cd a000 	str.w	sl, [sp]
 8001edc:	464b      	mov	r3, r9
 8001ede:	aa03      	add	r2, sp, #12
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	4640      	mov	r0, r8
 8001ee4:	f7ff fee6 	bl	8001cb4 <_printf_common>
 8001ee8:	3001      	adds	r0, #1
 8001eea:	d14a      	bne.n	8001f82 <_printf_i+0x1f2>
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ef0:	b004      	add	sp, #16
 8001ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	f043 0320 	orr.w	r3, r3, #32
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	4833      	ldr	r0, [pc, #204]	@ (8001fcc <_printf_i+0x23c>)
 8001f00:	2778      	movs	r7, #120	@ 0x78
 8001f02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	6831      	ldr	r1, [r6, #0]
 8001f0a:	061f      	lsls	r7, r3, #24
 8001f0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f10:	d402      	bmi.n	8001f18 <_printf_i+0x188>
 8001f12:	065f      	lsls	r7, r3, #25
 8001f14:	bf48      	it	mi
 8001f16:	b2ad      	uxthmi	r5, r5
 8001f18:	6031      	str	r1, [r6, #0]
 8001f1a:	07d9      	lsls	r1, r3, #31
 8001f1c:	bf44      	itt	mi
 8001f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8001f22:	6023      	strmi	r3, [r4, #0]
 8001f24:	b11d      	cbz	r5, 8001f2e <_printf_i+0x19e>
 8001f26:	2310      	movs	r3, #16
 8001f28:	e7ac      	b.n	8001e84 <_printf_i+0xf4>
 8001f2a:	4827      	ldr	r0, [pc, #156]	@ (8001fc8 <_printf_i+0x238>)
 8001f2c:	e7e9      	b.n	8001f02 <_printf_i+0x172>
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	f023 0320 	bic.w	r3, r3, #32
 8001f34:	6023      	str	r3, [r4, #0]
 8001f36:	e7f6      	b.n	8001f26 <_printf_i+0x196>
 8001f38:	4616      	mov	r6, r2
 8001f3a:	e7bd      	b.n	8001eb8 <_printf_i+0x128>
 8001f3c:	6833      	ldr	r3, [r6, #0]
 8001f3e:	6825      	ldr	r5, [r4, #0]
 8001f40:	6961      	ldr	r1, [r4, #20]
 8001f42:	1d18      	adds	r0, r3, #4
 8001f44:	6030      	str	r0, [r6, #0]
 8001f46:	062e      	lsls	r6, r5, #24
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	d501      	bpl.n	8001f50 <_printf_i+0x1c0>
 8001f4c:	6019      	str	r1, [r3, #0]
 8001f4e:	e002      	b.n	8001f56 <_printf_i+0x1c6>
 8001f50:	0668      	lsls	r0, r5, #25
 8001f52:	d5fb      	bpl.n	8001f4c <_printf_i+0x1bc>
 8001f54:	8019      	strh	r1, [r3, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	6123      	str	r3, [r4, #16]
 8001f5a:	4616      	mov	r6, r2
 8001f5c:	e7bc      	b.n	8001ed8 <_printf_i+0x148>
 8001f5e:	6833      	ldr	r3, [r6, #0]
 8001f60:	1d1a      	adds	r2, r3, #4
 8001f62:	6032      	str	r2, [r6, #0]
 8001f64:	681e      	ldr	r6, [r3, #0]
 8001f66:	6862      	ldr	r2, [r4, #4]
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f7fe f930 	bl	80001d0 <memchr>
 8001f70:	b108      	cbz	r0, 8001f76 <_printf_i+0x1e6>
 8001f72:	1b80      	subs	r0, r0, r6
 8001f74:	6060      	str	r0, [r4, #4]
 8001f76:	6863      	ldr	r3, [r4, #4]
 8001f78:	6123      	str	r3, [r4, #16]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f80:	e7aa      	b.n	8001ed8 <_printf_i+0x148>
 8001f82:	6923      	ldr	r3, [r4, #16]
 8001f84:	4632      	mov	r2, r6
 8001f86:	4649      	mov	r1, r9
 8001f88:	4640      	mov	r0, r8
 8001f8a:	47d0      	blx	sl
 8001f8c:	3001      	adds	r0, #1
 8001f8e:	d0ad      	beq.n	8001eec <_printf_i+0x15c>
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	079b      	lsls	r3, r3, #30
 8001f94:	d413      	bmi.n	8001fbe <_printf_i+0x22e>
 8001f96:	68e0      	ldr	r0, [r4, #12]
 8001f98:	9b03      	ldr	r3, [sp, #12]
 8001f9a:	4298      	cmp	r0, r3
 8001f9c:	bfb8      	it	lt
 8001f9e:	4618      	movlt	r0, r3
 8001fa0:	e7a6      	b.n	8001ef0 <_printf_i+0x160>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4632      	mov	r2, r6
 8001fa6:	4649      	mov	r1, r9
 8001fa8:	4640      	mov	r0, r8
 8001faa:	47d0      	blx	sl
 8001fac:	3001      	adds	r0, #1
 8001fae:	d09d      	beq.n	8001eec <_printf_i+0x15c>
 8001fb0:	3501      	adds	r5, #1
 8001fb2:	68e3      	ldr	r3, [r4, #12]
 8001fb4:	9903      	ldr	r1, [sp, #12]
 8001fb6:	1a5b      	subs	r3, r3, r1
 8001fb8:	42ab      	cmp	r3, r5
 8001fba:	dcf2      	bgt.n	8001fa2 <_printf_i+0x212>
 8001fbc:	e7eb      	b.n	8001f96 <_printf_i+0x206>
 8001fbe:	2500      	movs	r5, #0
 8001fc0:	f104 0619 	add.w	r6, r4, #25
 8001fc4:	e7f5      	b.n	8001fb2 <_printf_i+0x222>
 8001fc6:	bf00      	nop
 8001fc8:	08002255 	.word	0x08002255
 8001fcc:	08002266 	.word	0x08002266

08001fd0 <__malloc_lock>:
 8001fd0:	4801      	ldr	r0, [pc, #4]	@ (8001fd8 <__malloc_lock+0x8>)
 8001fd2:	f7ff bc73 	b.w	80018bc <__retarget_lock_acquire_recursive>
 8001fd6:	bf00      	nop
 8001fd8:	200001bc 	.word	0x200001bc

08001fdc <__malloc_unlock>:
 8001fdc:	4801      	ldr	r0, [pc, #4]	@ (8001fe4 <__malloc_unlock+0x8>)
 8001fde:	f7ff bc6e 	b.w	80018be <__retarget_lock_release_recursive>
 8001fe2:	bf00      	nop
 8001fe4:	200001bc 	.word	0x200001bc

08001fe8 <_realloc_r>:
 8001fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fec:	4680      	mov	r8, r0
 8001fee:	4615      	mov	r5, r2
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	b921      	cbnz	r1, 8001ffe <_realloc_r+0x16>
 8001ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	f7ff bddb 	b.w	8001bb4 <_malloc_r>
 8001ffe:	b92a      	cbnz	r2, 800200c <_realloc_r+0x24>
 8002000:	f000 f858 	bl	80020b4 <_free_r>
 8002004:	2400      	movs	r4, #0
 8002006:	4620      	mov	r0, r4
 8002008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800200c:	f000 f89c 	bl	8002148 <_malloc_usable_size_r>
 8002010:	4285      	cmp	r5, r0
 8002012:	4606      	mov	r6, r0
 8002014:	d802      	bhi.n	800201c <_realloc_r+0x34>
 8002016:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800201a:	d8f4      	bhi.n	8002006 <_realloc_r+0x1e>
 800201c:	4629      	mov	r1, r5
 800201e:	4640      	mov	r0, r8
 8002020:	f7ff fdc8 	bl	8001bb4 <_malloc_r>
 8002024:	4607      	mov	r7, r0
 8002026:	2800      	cmp	r0, #0
 8002028:	d0ec      	beq.n	8002004 <_realloc_r+0x1c>
 800202a:	42b5      	cmp	r5, r6
 800202c:	462a      	mov	r2, r5
 800202e:	4621      	mov	r1, r4
 8002030:	bf28      	it	cs
 8002032:	4632      	movcs	r2, r6
 8002034:	f000 f830 	bl	8002098 <memcpy>
 8002038:	4621      	mov	r1, r4
 800203a:	4640      	mov	r0, r8
 800203c:	f000 f83a 	bl	80020b4 <_free_r>
 8002040:	463c      	mov	r4, r7
 8002042:	e7e0      	b.n	8002006 <_realloc_r+0x1e>

08002044 <memmove>:
 8002044:	4288      	cmp	r0, r1
 8002046:	b510      	push	{r4, lr}
 8002048:	eb01 0402 	add.w	r4, r1, r2
 800204c:	d902      	bls.n	8002054 <memmove+0x10>
 800204e:	4284      	cmp	r4, r0
 8002050:	4623      	mov	r3, r4
 8002052:	d807      	bhi.n	8002064 <memmove+0x20>
 8002054:	1e43      	subs	r3, r0, #1
 8002056:	42a1      	cmp	r1, r4
 8002058:	d008      	beq.n	800206c <memmove+0x28>
 800205a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800205e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002062:	e7f8      	b.n	8002056 <memmove+0x12>
 8002064:	4402      	add	r2, r0
 8002066:	4601      	mov	r1, r0
 8002068:	428a      	cmp	r2, r1
 800206a:	d100      	bne.n	800206e <memmove+0x2a>
 800206c:	bd10      	pop	{r4, pc}
 800206e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002076:	e7f7      	b.n	8002068 <memmove+0x24>

08002078 <_sbrk_r>:
 8002078:	b538      	push	{r3, r4, r5, lr}
 800207a:	4d06      	ldr	r5, [pc, #24]	@ (8002094 <_sbrk_r+0x1c>)
 800207c:	2300      	movs	r3, #0
 800207e:	4604      	mov	r4, r0
 8002080:	4608      	mov	r0, r1
 8002082:	602b      	str	r3, [r5, #0]
 8002084:	f7fe fbd0 	bl	8000828 <_sbrk>
 8002088:	1c43      	adds	r3, r0, #1
 800208a:	d102      	bne.n	8002092 <_sbrk_r+0x1a>
 800208c:	682b      	ldr	r3, [r5, #0]
 800208e:	b103      	cbz	r3, 8002092 <_sbrk_r+0x1a>
 8002090:	6023      	str	r3, [r4, #0]
 8002092:	bd38      	pop	{r3, r4, r5, pc}
 8002094:	200001c8 	.word	0x200001c8

08002098 <memcpy>:
 8002098:	440a      	add	r2, r1
 800209a:	4291      	cmp	r1, r2
 800209c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80020a0:	d100      	bne.n	80020a4 <memcpy+0xc>
 80020a2:	4770      	bx	lr
 80020a4:	b510      	push	{r4, lr}
 80020a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020ae:	4291      	cmp	r1, r2
 80020b0:	d1f9      	bne.n	80020a6 <memcpy+0xe>
 80020b2:	bd10      	pop	{r4, pc}

080020b4 <_free_r>:
 80020b4:	b538      	push	{r3, r4, r5, lr}
 80020b6:	4605      	mov	r5, r0
 80020b8:	2900      	cmp	r1, #0
 80020ba:	d041      	beq.n	8002140 <_free_r+0x8c>
 80020bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020c0:	1f0c      	subs	r4, r1, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bfb8      	it	lt
 80020c6:	18e4      	addlt	r4, r4, r3
 80020c8:	f7ff ff82 	bl	8001fd0 <__malloc_lock>
 80020cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <_free_r+0x90>)
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	b933      	cbnz	r3, 80020e0 <_free_r+0x2c>
 80020d2:	6063      	str	r3, [r4, #4]
 80020d4:	6014      	str	r4, [r2, #0]
 80020d6:	4628      	mov	r0, r5
 80020d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020dc:	f7ff bf7e 	b.w	8001fdc <__malloc_unlock>
 80020e0:	42a3      	cmp	r3, r4
 80020e2:	d908      	bls.n	80020f6 <_free_r+0x42>
 80020e4:	6820      	ldr	r0, [r4, #0]
 80020e6:	1821      	adds	r1, r4, r0
 80020e8:	428b      	cmp	r3, r1
 80020ea:	bf01      	itttt	eq
 80020ec:	6819      	ldreq	r1, [r3, #0]
 80020ee:	685b      	ldreq	r3, [r3, #4]
 80020f0:	1809      	addeq	r1, r1, r0
 80020f2:	6021      	streq	r1, [r4, #0]
 80020f4:	e7ed      	b.n	80020d2 <_free_r+0x1e>
 80020f6:	461a      	mov	r2, r3
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	b10b      	cbz	r3, 8002100 <_free_r+0x4c>
 80020fc:	42a3      	cmp	r3, r4
 80020fe:	d9fa      	bls.n	80020f6 <_free_r+0x42>
 8002100:	6811      	ldr	r1, [r2, #0]
 8002102:	1850      	adds	r0, r2, r1
 8002104:	42a0      	cmp	r0, r4
 8002106:	d10b      	bne.n	8002120 <_free_r+0x6c>
 8002108:	6820      	ldr	r0, [r4, #0]
 800210a:	4401      	add	r1, r0
 800210c:	1850      	adds	r0, r2, r1
 800210e:	4283      	cmp	r3, r0
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	d1e0      	bne.n	80020d6 <_free_r+0x22>
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	6053      	str	r3, [r2, #4]
 800211a:	4408      	add	r0, r1
 800211c:	6010      	str	r0, [r2, #0]
 800211e:	e7da      	b.n	80020d6 <_free_r+0x22>
 8002120:	d902      	bls.n	8002128 <_free_r+0x74>
 8002122:	230c      	movs	r3, #12
 8002124:	602b      	str	r3, [r5, #0]
 8002126:	e7d6      	b.n	80020d6 <_free_r+0x22>
 8002128:	6820      	ldr	r0, [r4, #0]
 800212a:	1821      	adds	r1, r4, r0
 800212c:	428b      	cmp	r3, r1
 800212e:	bf04      	itt	eq
 8002130:	6819      	ldreq	r1, [r3, #0]
 8002132:	685b      	ldreq	r3, [r3, #4]
 8002134:	6063      	str	r3, [r4, #4]
 8002136:	bf04      	itt	eq
 8002138:	1809      	addeq	r1, r1, r0
 800213a:	6021      	streq	r1, [r4, #0]
 800213c:	6054      	str	r4, [r2, #4]
 800213e:	e7ca      	b.n	80020d6 <_free_r+0x22>
 8002140:	bd38      	pop	{r3, r4, r5, pc}
 8002142:	bf00      	nop
 8002144:	200001c4 	.word	0x200001c4

08002148 <_malloc_usable_size_r>:
 8002148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800214c:	1f18      	subs	r0, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	bfbc      	itt	lt
 8002152:	580b      	ldrlt	r3, [r1, r0]
 8002154:	18c0      	addlt	r0, r0, r3
 8002156:	4770      	bx	lr

08002158 <_init>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	bf00      	nop
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr

08002164 <_fini>:
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	bf00      	nop
 8002168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216a:	bc08      	pop	{r3}
 800216c:	469e      	mov	lr, r3
 800216e:	4770      	bx	lr
