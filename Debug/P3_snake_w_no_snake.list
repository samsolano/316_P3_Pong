
P3_snake_w_no_snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ef4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002084  08002084  00003084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002148  08002148  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002148  08002148  00003148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002150  08002150  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002150  08002150  00003150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002154  08002154  00003154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002158  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000060  080021b8  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080021b8  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004698  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000100b  00000000  00000000  00008728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00009738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000423  00000000  00000000  00009ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024daa  00000000  00000000  0000a10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000578b  00000000  00000000  0002eeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d62  00000000  00000000  00034640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001163a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a24  00000000  00000000  001163e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00117e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800206c 	.word	0x0800206c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800206c 	.word	0x0800206c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	@ (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <UART_print_int>:
    sprintf(buffer, "%s%d.%03d V\r\n\r\n", string, integer_part, decimal_part);
    UART_print(buffer);
}

void UART_print_int(char *string, int16_t value)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b09c      	sub	sp, #112	@ 0x70
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	807b      	strh	r3, [r7, #2]
	char stringify[100] = {0};
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	2260      	movs	r2, #96	@ 0x60
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fa51 	bl	800176c <memset>
	sprintf(stringify,string ,value); //take value and format it into char array
 80002ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 fa29 	bl	800172c <siprintf>
	UART_print(stringify);
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f842 	bl	8000368 <UART_print>
}
 80002e4:	bf00      	nop
 80002e6:	3770      	adds	r7, #112	@ 0x70
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <UART_init>:

void UART_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	 // Enable clocks for GPIOA and USART2
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   // Enable GPIOA clock
 80002f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000360 <UART_init+0x74>)
 80002f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000360 <UART_init+0x74>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // Enable USART2 clock
 80002fc:	4b18      	ldr	r3, [pc, #96]	@ (8000360 <UART_init+0x74>)
 80002fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000300:	4a17      	ldr	r2, [pc, #92]	@ (8000360 <UART_init+0x74>)
 8000302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000306:	6593      	str	r3, [r2, #88]	@ 0x58

	// Configure PA2 as USART2_TX and PA3 as USART2_RX
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3); // Clear mode bits
 8000308:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000316:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1); // Set alternate function mode
 8000318:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000322:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000326:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL2_Pos); // Set AF7 (USART2) for PA2
 8000328:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800032c:	6a1b      	ldr	r3, [r3, #32]
 800032e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000332:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000336:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL3_Pos); // Set AF7 (USART2) for PA3
 8000338:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800033c:	6a1b      	ldr	r3, [r3, #32]
 800033e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000342:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000346:	6213      	str	r3, [r2, #32]

	// Configure USART2 for 115200 baud rate (assuming 4 MHz clock)
	USART2->BRR = 208; // Set baud rate divisor for 115200 baud (4 MHz / (16 * 115200) ≈ 35)
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <UART_init+0x78>)
 800034a:	22d0      	movs	r2, #208	@ 0xd0
 800034c:	60da      	str	r2, [r3, #12]

	// Enable USART2, transmitter, and receiver and receive data register
	USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE);
 800034e:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <UART_init+0x78>)
 8000350:	222d      	movs	r2, #45	@ 0x2d
 8000352:	601a      	str	r2, [r3, #0]
	//enable interrupts
	NVIC_EnableIRQ(USART2_IRQn);
 8000354:	2026      	movs	r0, #38	@ 0x26
 8000356:	f7ff ff8b 	bl	8000270 <__NVIC_EnableIRQ>
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000
 8000364:	40004400 	.word	0x40004400

08000368 <UART_print>:

void UART_print(char *str)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	while (*str != '\0') 		// Loop until the end of the string
 8000370:	e00c      	b.n	800038c <UART_print+0x24>
	{
		while (!(USART2->ISR & USART_ISR_TXE)) {} //finish receiving
 8000372:	bf00      	nop
 8000374:	4b0b      	ldr	r3, [pc, #44]	@ (80003a4 <UART_print+0x3c>)
 8000376:	69db      	ldr	r3, [r3, #28]
 8000378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <UART_print+0xc>
		USART2->TDR = *str++; 				//write it out
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	607a      	str	r2, [r7, #4]
 8000386:	781a      	ldrb	r2, [r3, #0]
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <UART_print+0x3c>)
 800038a:	851a      	strh	r2, [r3, #40]	@ 0x28
	while (*str != '\0') 		// Loop until the end of the string
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1ee      	bne.n	8000372 <UART_print+0xa>
	}

}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40004400 	.word	0x40004400

080003a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0

	//if receiving data interrupt
	if(USART2->ISR & USART_ISR_RXNE)
 80003ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <USART2_IRQHandler+0x70>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 0320 	and.w	r3, r3, #32
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d029      	beq.n	800040e <USART2_IRQHandler+0x66>
	{
		char single[2];
		//put input anded with the read register into a variable
		sprintf(single,"%c", (char)(USART2->RDR & USART_RDR_RDR));
 80003ba:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <USART2_IRQHandler+0x70>)
 80003bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003be:	b29b      	uxth	r3, r3
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4915      	ldr	r1, [pc, #84]	@ (800041c <USART2_IRQHandler+0x74>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 f9af 	bl	800172c <siprintf>

		if(single[0] == 'a') //when s is pressed switch between DC and AC views
 80003ce:	793b      	ldrb	r3, [r7, #4]
 80003d0:	2b61      	cmp	r3, #97	@ 0x61
 80003d2:	d109      	bne.n	80003e8 <USART2_IRQHandler+0x40>
		{
			if(paddle_position >= 3)
 80003d4:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <USART2_IRQHandler+0x78>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d905      	bls.n	80003e8 <USART2_IRQHandler+0x40>
			{
				paddle_position -= 3;
 80003dc:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <USART2_IRQHandler+0x78>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	3b03      	subs	r3, #3
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <USART2_IRQHandler+0x78>)
 80003e6:	701a      	strb	r2, [r3, #0]
			}
		}
		if(single[0] == 'd') //when s is pressed switch between DC and AC views
 80003e8:	793b      	ldrb	r3, [r7, #4]
 80003ea:	2b64      	cmp	r3, #100	@ 0x64
 80003ec:	d109      	bne.n	8000402 <USART2_IRQHandler+0x5a>
		{
			if(paddle_position <= 76)
 80003ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <USART2_IRQHandler+0x78>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b4c      	cmp	r3, #76	@ 0x4c
 80003f4:	d805      	bhi.n	8000402 <USART2_IRQHandler+0x5a>
			{
				paddle_position += 3;
 80003f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <USART2_IRQHandler+0x78>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3303      	adds	r3, #3
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <USART2_IRQHandler+0x78>)
 8000400:	701a      	strb	r2, [r3, #0]
			}
		}
		USART2->ISR &= ~(USART_ISR_RXNE);
 8000402:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <USART2_IRQHandler+0x70>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a04      	ldr	r2, [pc, #16]	@ (8000418 <USART2_IRQHandler+0x70>)
 8000408:	f023 0320 	bic.w	r3, r3, #32
 800040c:	61d3      	str	r3, [r2, #28]
	}

}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40004400 	.word	0x40004400
 800041c:	08002094 	.word	0x08002094
 8000420:	20000000 	.word	0x20000000

08000424 <main>:
void GAME_init(Ball *ball);
void Check_Collisions(int8_t *dx, int8_t *dy, int8_t *x_position, int8_t *y_position);


int main(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	HAL_Init();
 800042a:	f000 f9f8 	bl	800081e <HAL_Init>
	SystemClock_Config();
 800042e:	f000 f8e5 	bl	80005fc <SystemClock_Config>
	UART_init();
 8000432:	f7ff ff5b 	bl	80002ec <UART_init>

	Ball ball;
	GAME_init(&ball);
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f8c9 	bl	80005d0 <GAME_init>

	while (1)
	{
		Print_Screen(&(ball.x), &(ball.y));
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	1c5a      	adds	r2, r3, #1
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4611      	mov	r1, r2
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f866 	bl	8000518 <Print_Screen>
		Check_Collisions(&(ball.dx), &(ball.dy), &(ball.x), &(ball.y));
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	1c5c      	adds	r4, r3, #1
 8000450:	1d3a      	adds	r2, r7, #4
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	1cd9      	adds	r1, r3, #3
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	1c98      	adds	r0, r3, #2
 800045a:	4623      	mov	r3, r4
 800045c:	f000 f802 	bl	8000464 <Check_Collisions>
		Print_Screen(&(ball.x), &(ball.y));
 8000460:	bf00      	nop
 8000462:	e7ec      	b.n	800043e <main+0x1a>

08000464 <Check_Collisions>:
	}
}


void Check_Collisions(int8_t *dx, int8_t *dy, int8_t *x_position, int8_t *y_position)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
 8000470:	603b      	str	r3, [r7, #0]
	*x_position += *dx;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f993 3000 	ldrsb.w	r3, [r3]
 8000478:	b2da      	uxtb	r2, r3
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f993 3000 	ldrsb.w	r3, [r3]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4413      	add	r3, r2
 8000484:	b2db      	uxtb	r3, r3
 8000486:	b25a      	sxtb	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	701a      	strb	r2, [r3, #0]
	*y_position += *dy;
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	f993 3000 	ldrsb.w	r3, [r3]
 8000492:	b2da      	uxtb	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	f993 3000 	ldrsb.w	r3, [r3]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4413      	add	r3, r2
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	b25a      	sxtb	r2, r3
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	701a      	strb	r2, [r3, #0]

	UART_print_int("\r\n x_position: %d", *x_position);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	f993 3000 	ldrsb.w	r3, [r3]
 80004ac:	4619      	mov	r1, r3
 80004ae:	4818      	ldr	r0, [pc, #96]	@ (8000510 <Check_Collisions+0xac>)
 80004b0:	f7ff fefc 	bl	80002ac <UART_print_int>
	UART_print_int("\r\n dx: %d", *dx);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f993 3000 	ldrsb.w	r3, [r3]
 80004ba:	4619      	mov	r1, r3
 80004bc:	4815      	ldr	r0, [pc, #84]	@ (8000514 <Check_Collisions+0xb0>)
 80004be:	f7ff fef5 	bl	80002ac <UART_print_int>

	if((*x_position == 79) && (*dx > 0))
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f993 3000 	ldrsb.w	r3, [r3]
 80004c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80004ca:	d107      	bne.n	80004dc <Check_Collisions+0x78>
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f993 3000 	ldrsb.w	r3, [r3]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	dd02      	ble.n	80004dc <Check_Collisions+0x78>
	{
		*dx = -1;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	22ff      	movs	r2, #255	@ 0xff
 80004da:	701a      	strb	r2, [r3, #0]
	}
	if((*x_position == 0) && (*dx < 0))
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f993 3000 	ldrsb.w	r3, [r3]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d107      	bne.n	80004f6 <Check_Collisions+0x92>
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f993 3000 	ldrsb.w	r3, [r3]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	da02      	bge.n	80004f6 <Check_Collisions+0x92>
	{
		*dx = 1;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
	}

	if(*y_position == 1)
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	f993 3000 	ldrsb.w	r3, [r3]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d102      	bne.n	8000506 <Check_Collisions+0xa2>
	{
		*dy = 1;
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
	}
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08002098 	.word	0x08002098
 8000514:	080020ac 	.word	0x080020ac

08000518 <Print_Screen>:


void Print_Screen(int8_t *x_position, int8_t *y_position)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < 500000; i++) {}
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e002      	b.n	800052e <Print_Screen+0x16>
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	4a20      	ldr	r2, [pc, #128]	@ (80005b4 <Print_Screen+0x9c>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d9f8      	bls.n	8000528 <Print_Screen+0x10>
	UART_print("\033[2J\033[H");
 8000536:	4820      	ldr	r0, [pc, #128]	@ (80005b8 <Print_Screen+0xa0>)
 8000538:	f7ff ff16 	bl	8000368 <UART_print>

	for(uint8_t row = 0; row < VIEW_HEIGHT; row++)
 800053c:	2300      	movs	r3, #0
 800053e:	72fb      	strb	r3, [r7, #11]
 8000540:	e02f      	b.n	80005a2 <Print_Screen+0x8a>
	{

		for(uint8_t col = 0; col < VIEW_WIDTH; col++)
 8000542:	2300      	movs	r3, #0
 8000544:	72bb      	strb	r3, [r7, #10]
 8000546:	e023      	b.n	8000590 <Print_Screen+0x78>
		{
			if((row == *y_position) && (col == *x_position))	// for printing ball
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	f992 2000 	ldrsb.w	r2, [r2]
 8000550:	4293      	cmp	r3, r2
 8000552:	d108      	bne.n	8000566 <Print_Screen+0x4e>
 8000554:	7abb      	ldrb	r3, [r7, #10]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	f992 2000 	ldrsb.w	r2, [r2]
 800055c:	4293      	cmp	r3, r2
 800055e:	d102      	bne.n	8000566 <Print_Screen+0x4e>
			{
				UART_print("o");
 8000560:	4816      	ldr	r0, [pc, #88]	@ (80005bc <Print_Screen+0xa4>)
 8000562:	f7ff ff01 	bl	8000368 <UART_print>
			}
			if((row == 15) && (col == paddle_position))		// for printing paddle
 8000566:	7afb      	ldrb	r3, [r7, #11]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d10b      	bne.n	8000584 <Print_Screen+0x6c>
 800056c:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <Print_Screen+0xa8>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	7aba      	ldrb	r2, [r7, #10]
 8000572:	429a      	cmp	r2, r3
 8000574:	d106      	bne.n	8000584 <Print_Screen+0x6c>
			{
				UART_print("_____");
 8000576:	4813      	ldr	r0, [pc, #76]	@ (80005c4 <Print_Screen+0xac>)
 8000578:	f7ff fef6 	bl	8000368 <UART_print>
				col += 4;
 800057c:	7abb      	ldrb	r3, [r7, #10]
 800057e:	3304      	adds	r3, #4
 8000580:	72bb      	strb	r3, [r7, #10]
 8000582:	e002      	b.n	800058a <Print_Screen+0x72>
			}
			else
			{
				UART_print(" ");
 8000584:	4810      	ldr	r0, [pc, #64]	@ (80005c8 <Print_Screen+0xb0>)
 8000586:	f7ff feef 	bl	8000368 <UART_print>
		for(uint8_t col = 0; col < VIEW_WIDTH; col++)
 800058a:	7abb      	ldrb	r3, [r7, #10]
 800058c:	3301      	adds	r3, #1
 800058e:	72bb      	strb	r3, [r7, #10]
 8000590:	7abb      	ldrb	r3, [r7, #10]
 8000592:	2b4f      	cmp	r3, #79	@ 0x4f
 8000594:	d9d8      	bls.n	8000548 <Print_Screen+0x30>
			}
		}
		UART_print("\r\n");
 8000596:	480d      	ldr	r0, [pc, #52]	@ (80005cc <Print_Screen+0xb4>)
 8000598:	f7ff fee6 	bl	8000368 <UART_print>
	for(uint8_t row = 0; row < VIEW_HEIGHT; row++)
 800059c:	7afb      	ldrb	r3, [r7, #11]
 800059e:	3301      	adds	r3, #1
 80005a0:	72fb      	strb	r3, [r7, #11]
 80005a2:	7afb      	ldrb	r3, [r7, #11]
 80005a4:	2b17      	cmp	r3, #23
 80005a6:	d9cc      	bls.n	8000542 <Print_Screen+0x2a>
	}
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	0007a11f 	.word	0x0007a11f
 80005b8:	080020b8 	.word	0x080020b8
 80005bc:	080020c0 	.word	0x080020c0
 80005c0:	20000000 	.word	0x20000000
 80005c4:	080020c4 	.word	0x080020c4
 80005c8:	080020cc 	.word	0x080020cc
 80005cc:	080020d0 	.word	0x080020d0

080005d0 <GAME_init>:


void GAME_init(Ball *ball)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	ball->x = 5;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2205      	movs	r2, #5
 80005dc:	701a      	strb	r2, [r3, #0]
	ball->y = BALL_Y_START;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	220a      	movs	r2, #10
 80005e2:	705a      	strb	r2, [r3, #1]
	ball->dx = -1;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	22ff      	movs	r2, #255	@ 0xff
 80005e8:	709a      	strb	r2, [r3, #2]
	ball->dy = -1;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	22ff      	movs	r2, #255	@ 0xff
 80005ee:	70da      	strb	r2, [r3, #3]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	@ 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f8ae 	bl	800176c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000622:	f000 fa65 	bl	8000af0 <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 f82c 	bl	8000688 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000630:	2310      	movs	r3, #16
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800063c:	2390      	movs	r3, #144	@ 0x90
 800063e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f000 faa7 	bl	8000b9c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000654:	f000 f818 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fe6f 	bl	8001354 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800067c:	f000 f804 	bl	8000688 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3758      	adds	r7, #88	@ 0x58
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <Error_Handler+0x8>

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_MspInit+0x44>)
 800069c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800069e:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <HAL_MspInit+0x44>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <HAL_MspInit+0x44>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <HAL_MspInit+0x44>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <HAL_MspInit+0x44>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_MspInit+0x44>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <NMI_Handler+0x4>

080006e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <MemManage_Handler+0x4>

080006f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <UsageFault_Handler+0x4>

08000704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000732:	f000 f8c9 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <_sbrk+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <_sbrk+0x60>)
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <_sbrk+0x64>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <_sbrk+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d207      	bcs.n	800077c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800076c:	f001 f806 	bl	800177c <__errno>
 8000770:	4603      	mov	r3, r0
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800077a:	e009      	b.n	8000790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <_sbrk+0x64>)
 800078c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20018000 	.word	0x20018000
 800079c:	00000400 	.word	0x00000400
 80007a0:	2000007c 	.word	0x2000007c
 80007a4:	200001d0 	.word	0x200001d0

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <SystemInit+0x20>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b2:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <SystemInit+0x20>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000804 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d0:	f7ff ffea 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490d      	ldr	r1, [pc, #52]	@ (800080c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000818 <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fa:	f000 ffc5 	bl	8001788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fe:	f7ff fe11 	bl	8000424 <main>

08000802 <LoopForever>:

LoopForever:
    b LoopForever
 8000802:	e7fe      	b.n	8000802 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000804:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000810:	08002158 	.word	0x08002158
  ldr r2, =_sbss
 8000814:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000818:	200001cc 	.word	0x200001cc

0800081c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC1_2_IRQHandler>

0800081e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000824:	2300      	movs	r3, #0
 8000826:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f91f 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082e:	200f      	movs	r0, #15
 8000830:	f000 f80e 	bl	8000850 <HAL_InitTick>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	e001      	b.n	8000844 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000840:	f7ff ff28 	bl	8000694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000844:	79fb      	ldrb	r3, [r7, #7]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_InitTick+0x6c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d023      	beq.n	80008ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <HAL_InitTick+0x70>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <HAL_InitTick+0x6c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f91d 	bl	8000aba <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10f      	bne.n	80008a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d809      	bhi.n	80008a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000894:	f000 f8f5 	bl	8000a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000898:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <HAL_InitTick+0x74>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e007      	b.n	80008b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e004      	b.n	80008b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e001      	b.n	80008b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000000c 	.word	0x2000000c
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000008 	.word	0x20000008

080008c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_IncTick+0x20>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_IncTick+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <HAL_IncTick+0x24>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	2000000c 	.word	0x2000000c
 80008ec:	20000080 	.word	0x20000080

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000080 	.word	0x20000080

08000908 <__NVIC_SetPriorityGrouping>:
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	@ (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	@ (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	@ 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a4c:	f7ff ff8e 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff47 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff5c 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff8e 	bl	80009c0 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffb0 	bl	8000a28 <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <HAL_PWREx_GetVoltageRange+0x18>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40007000 	.word	0x40007000

08000af0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000afe:	d130      	bne.n	8000b62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b00:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b0c:	d038      	beq.n	8000b80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b16:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2232      	movs	r2, #50	@ 0x32
 8000b24:	fb02 f303 	mul.w	r3, r2, r3
 8000b28:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0c9b      	lsrs	r3, r3, #18
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b34:	e002      	b.n	8000b3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b48:	d102      	bne.n	8000b50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1f2      	bne.n	8000b36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b5c:	d110      	bne.n	8000b80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e00f      	b.n	8000b82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b6e:	d007      	beq.n	8000b80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b78:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40007000 	.word	0x40007000
 8000b94:	20000004 	.word	0x20000004
 8000b98:	431bde83 	.word	0x431bde83

08000b9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e3ca      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bae:	4b97      	ldr	r3, [pc, #604]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
 8000bb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bb8:	4b94      	ldr	r3, [pc, #592]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 80e4 	beq.w	8000d98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <HAL_RCC_OscConfig+0x4a>
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	2b0c      	cmp	r3, #12
 8000bda:	f040 808b 	bne.w	8000cf4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 8087 	bne.w	8000cf4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000be6:	4b89      	ldr	r3, [pc, #548]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <HAL_RCC_OscConfig+0x62>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e3a2      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a1a      	ldr	r2, [r3, #32]
 8000c02:	4b82      	ldr	r3, [pc, #520]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d004      	beq.n	8000c18 <HAL_RCC_OscConfig+0x7c>
 8000c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000c16:	e005      	b.n	8000c24 <HAL_RCC_OscConfig+0x88>
 8000c18:	4b7c      	ldr	r3, [pc, #496]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d223      	bcs.n	8000c70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fd1d 	bl	800166c <RCC_SetFlashLatencyFromMSIRange>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e383      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c3c:	4b73      	ldr	r3, [pc, #460]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a72      	ldr	r2, [pc, #456]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b70      	ldr	r3, [pc, #448]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	496d      	ldr	r1, [pc, #436]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c56:	4313      	orrs	r3, r2
 8000c58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	4968      	ldr	r1, [pc, #416]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	604b      	str	r3, [r1, #4]
 8000c6e:	e025      	b.n	8000cbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c70:	4b66      	ldr	r3, [pc, #408]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a65      	ldr	r2, [pc, #404]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	4b63      	ldr	r3, [pc, #396]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	4960      	ldr	r1, [pc, #384]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c8e:	4b5f      	ldr	r3, [pc, #380]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	495b      	ldr	r1, [pc, #364]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fcdd 	bl	800166c <RCC_SetFlashLatencyFromMSIRange>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e343      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000cbc:	f000 fc4a 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	4b52      	ldr	r3, [pc, #328]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	091b      	lsrs	r3, r3, #4
 8000cc8:	f003 030f 	and.w	r3, r3, #15
 8000ccc:	4950      	ldr	r1, [pc, #320]	@ (8000e10 <HAL_RCC_OscConfig+0x274>)
 8000cce:	5ccb      	ldrb	r3, [r1, r3]
 8000cd0:	f003 031f 	and.w	r3, r3, #31
 8000cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000e14 <HAL_RCC_OscConfig+0x278>)
 8000cda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8000e18 <HAL_RCC_OscConfig+0x27c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fdb5 	bl	8000850 <HAL_InitTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d052      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	e327      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d032      	beq.n	8000d62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cfc:	4b43      	ldr	r3, [pc, #268]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a42      	ldr	r2, [pc, #264]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fdf2 	bl	80008f0 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d10:	f7ff fdee 	bl	80008f0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e310      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d22:	4b3a      	ldr	r3, [pc, #232]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2e:	4b37      	ldr	r3, [pc, #220]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a36      	ldr	r2, [pc, #216]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b34      	ldr	r3, [pc, #208]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4931      	ldr	r1, [pc, #196]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	492c      	ldr	r1, [pc, #176]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
 8000d60:	e01a      	b.n	8000d98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d62:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a29      	ldr	r2, [pc, #164]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fdbf 	bl	80008f0 <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d76:	f7ff fdbb 	bl	80008f0 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e2dd      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d88:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f0      	bne.n	8000d76 <HAL_RCC_OscConfig+0x1da>
 8000d94:	e000      	b.n	8000d98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d074      	beq.n	8000e8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d005      	beq.n	8000db6 <HAL_RCC_OscConfig+0x21a>
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b0c      	cmp	r3, #12
 8000dae:	d10e      	bne.n	8000dce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d10b      	bne.n	8000dce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d064      	beq.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d160      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e2ba      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dd6:	d106      	bne.n	8000de6 <HAL_RCC_OscConfig+0x24a>
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e026      	b.n	8000e34 <HAL_RCC_OscConfig+0x298>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dee:	d115      	bne.n	8000e1c <HAL_RCC_OscConfig+0x280>
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000df6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a02      	ldr	r2, [pc, #8]	@ (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e014      	b.n	8000e34 <HAL_RCC_OscConfig+0x298>
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	080020d4 	.word	0x080020d4
 8000e14:	20000004 	.word	0x20000004
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	4ba0      	ldr	r3, [pc, #640]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a9f      	ldr	r2, [pc, #636]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b9d      	ldr	r3, [pc, #628]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a9c      	ldr	r2, [pc, #624]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d013      	beq.n	8000e64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fd58 	bl	80008f0 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fd54 	bl	80008f0 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	@ 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e276      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e56:	4b92      	ldr	r3, [pc, #584]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f0      	beq.n	8000e44 <HAL_RCC_OscConfig+0x2a8>
 8000e62:	e014      	b.n	8000e8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e64:	f7ff fd44 	bl	80008f0 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e6c:	f7ff fd40 	bl	80008f0 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b64      	cmp	r3, #100	@ 0x64
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e262      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e7e:	4b88      	ldr	r3, [pc, #544]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f0      	bne.n	8000e6c <HAL_RCC_OscConfig+0x2d0>
 8000e8a:	e000      	b.n	8000e8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d060      	beq.n	8000f5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d005      	beq.n	8000eac <HAL_RCC_OscConfig+0x310>
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b0c      	cmp	r3, #12
 8000ea4:	d119      	bne.n	8000eda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d116      	bne.n	8000eda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eac:	4b7c      	ldr	r3, [pc, #496]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d005      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x328>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e23f      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec4:	4b76      	ldr	r3, [pc, #472]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	061b      	lsls	r3, r3, #24
 8000ed2:	4973      	ldr	r1, [pc, #460]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ed8:	e040      	b.n	8000f5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d023      	beq.n	8000f2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eee:	f7ff fcff 	bl	80008f0 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fcfb 	bl	80008f0 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e21d      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f08:	4b65      	ldr	r3, [pc, #404]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f14:	4b62      	ldr	r3, [pc, #392]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	061b      	lsls	r3, r3, #24
 8000f22:	495f      	ldr	r1, [pc, #380]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]
 8000f28:	e018      	b.n	8000f5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fcdb 	bl	80008f0 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fcd7 	bl	80008f0 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e1f9      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f50:	4b53      	ldr	r3, [pc, #332]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d03c      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d01c      	beq.n	8000faa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f70:	4b4b      	ldr	r3, [pc, #300]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f76:	4a4a      	ldr	r2, [pc, #296]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f80:	f7ff fcb6 	bl	80008f0 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f88:	f7ff fcb2 	bl	80008f0 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1d4      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f9a:	4b41      	ldr	r3, [pc, #260]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0ef      	beq.n	8000f88 <HAL_RCC_OscConfig+0x3ec>
 8000fa8:	e01b      	b.n	8000fe2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000faa:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fb0:	4a3b      	ldr	r2, [pc, #236]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000fb2:	f023 0301 	bic.w	r3, r3, #1
 8000fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fba:	f7ff fc99 	bl	80008f0 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fc95 	bl	80008f0 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e1b7      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fd4:	4b32      	ldr	r3, [pc, #200]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1ef      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80a6 	beq.w	800113c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10d      	bne.n	800101c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8001002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001004:	4a26      	ldr	r2, [pc, #152]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100a:	6593      	str	r3, [r2, #88]	@ 0x58
 800100c:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001018:	2301      	movs	r3, #1
 800101a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800101c:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <HAL_RCC_OscConfig+0x508>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001024:	2b00      	cmp	r3, #0
 8001026:	d118      	bne.n	800105a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <HAL_RCC_OscConfig+0x508>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <HAL_RCC_OscConfig+0x508>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001034:	f7ff fc5c 	bl	80008f0 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103c:	f7ff fc58 	bl	80008f0 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e17a      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_RCC_OscConfig+0x508>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d108      	bne.n	8001074 <HAL_RCC_OscConfig+0x4d8>
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8001064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001072:	e029      	b.n	80010c8 <HAL_RCC_OscConfig+0x52c>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d115      	bne.n	80010a8 <HAL_RCC_OscConfig+0x50c>
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 800107e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001082:	4a07      	ldr	r2, [pc, #28]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 800108e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001092:	4a03      	ldr	r2, [pc, #12]	@ (80010a0 <HAL_RCC_OscConfig+0x504>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800109c:	e014      	b.n	80010c8 <HAL_RCC_OscConfig+0x52c>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40007000 	.word	0x40007000
 80010a8:	4b9c      	ldr	r3, [pc, #624]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80010aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ae:	4a9b      	ldr	r2, [pc, #620]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010b8:	4b98      	ldr	r3, [pc, #608]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010be:	4a97      	ldr	r2, [pc, #604]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d016      	beq.n	80010fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fc0e 	bl	80008f0 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010d6:	e00a      	b.n	80010ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d8:	f7ff fc0a 	bl	80008f0 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e12a      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010ee:	4b8b      	ldr	r3, [pc, #556]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80010f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0ed      	beq.n	80010d8 <HAL_RCC_OscConfig+0x53c>
 80010fc:	e015      	b.n	800112a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fe:	f7ff fbf7 	bl	80008f0 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fbf3 	bl	80008f0 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001114:	4293      	cmp	r3, r2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e113      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800111c:	4b7f      	ldr	r3, [pc, #508]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1ed      	bne.n	8001106 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800112a:	7ffb      	ldrb	r3, [r7, #31]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d105      	bne.n	800113c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001130:	4b7a      	ldr	r3, [pc, #488]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001134:	4a79      	ldr	r2, [pc, #484]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 8001136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800113a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80fe 	beq.w	8001342 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114a:	2b02      	cmp	r3, #2
 800114c:	f040 80d0 	bne.w	80012f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001150:	4b72      	ldr	r3, [pc, #456]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0203 	and.w	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001160:	429a      	cmp	r2, r3
 8001162:	d130      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	3b01      	subs	r3, #1
 8001170:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001172:	429a      	cmp	r2, r3
 8001174:	d127      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001180:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001182:	429a      	cmp	r2, r3
 8001184:	d11f      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001190:	2a07      	cmp	r2, #7
 8001192:	bf14      	ite	ne
 8001194:	2201      	movne	r2, #1
 8001196:	2200      	moveq	r2, #0
 8001198:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800119a:	4293      	cmp	r3, r2
 800119c:	d113      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011a8:	085b      	lsrs	r3, r3, #1
 80011aa:	3b01      	subs	r3, #1
 80011ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d109      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	3b01      	subs	r3, #1
 80011c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d06e      	beq.n	80012a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	d069      	beq.n	80012a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80011cc:	4b53      	ldr	r3, [pc, #332]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80011d8:	4b50      	ldr	r3, [pc, #320]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0ad      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80011e8:	4b4c      	ldr	r3, [pc, #304]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a4b      	ldr	r2, [pc, #300]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80011ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011f4:	f7ff fb7c 	bl	80008f0 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff fb78 	bl	80008f0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e09a      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800120e:	4b43      	ldr	r3, [pc, #268]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121a:	4b40      	ldr	r3, [pc, #256]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <HAL_RCC_OscConfig+0x784>)
 8001220:	4013      	ands	r3, r2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800122a:	3a01      	subs	r2, #1
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	4311      	orrs	r1, r2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001234:	0212      	lsls	r2, r2, #8
 8001236:	4311      	orrs	r1, r2
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800123c:	0852      	lsrs	r2, r2, #1
 800123e:	3a01      	subs	r2, #1
 8001240:	0552      	lsls	r2, r2, #21
 8001242:	4311      	orrs	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001248:	0852      	lsrs	r2, r2, #1
 800124a:	3a01      	subs	r2, #1
 800124c:	0652      	lsls	r2, r2, #25
 800124e:	4311      	orrs	r1, r2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001254:	0912      	lsrs	r2, r2, #4
 8001256:	0452      	lsls	r2, r2, #17
 8001258:	430a      	orrs	r2, r1
 800125a:	4930      	ldr	r1, [pc, #192]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 800125c:	4313      	orrs	r3, r2
 800125e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001260:	4b2e      	ldr	r3, [pc, #184]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a2d      	ldr	r2, [pc, #180]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 8001266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800126a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800126c:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4a2a      	ldr	r2, [pc, #168]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 8001272:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001276:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001278:	f7ff fb3a 	bl	80008f0 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff fb36 	bl	80008f0 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e058      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001292:	4b22      	ldr	r3, [pc, #136]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800129e:	e050      	b.n	8001342 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e04f      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d148      	bne.n	8001342 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80012b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a16      	ldr	r2, [pc, #88]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80012c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012c8:	f7ff fb12 	bl	80008f0 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fb0e 	bl	80008f0 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e030      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x734>
 80012ee:	e028      	b.n	8001342 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	d023      	beq.n	800133e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <HAL_RCC_OscConfig+0x780>)
 80012fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff faf5 	bl	80008f0 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001308:	e00c      	b.n	8001324 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff faf1 	bl	80008f0 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d905      	bls.n	8001324 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e013      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
 800131c:	40021000 	.word	0x40021000
 8001320:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_RCC_OscConfig+0x7b0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ec      	bne.n	800130a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_RCC_OscConfig+0x7b0>)
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	4905      	ldr	r1, [pc, #20]	@ (800134c <HAL_RCC_OscConfig+0x7b0>)
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_RCC_OscConfig+0x7b4>)
 8001338:	4013      	ands	r3, r2
 800133a:	60cb      	str	r3, [r1, #12]
 800133c:	e001      	b.n	8001342 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	feeefffc 	.word	0xfeeefffc

08001354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0e7      	b.n	8001538 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001368:	4b75      	ldr	r3, [pc, #468]	@ (8001540 <HAL_RCC_ClockConfig+0x1ec>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d910      	bls.n	8001398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b72      	ldr	r3, [pc, #456]	@ (8001540 <HAL_RCC_ClockConfig+0x1ec>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0207 	bic.w	r2, r3, #7
 800137e:	4970      	ldr	r1, [pc, #448]	@ (8001540 <HAL_RCC_ClockConfig+0x1ec>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b6e      	ldr	r3, [pc, #440]	@ (8001540 <HAL_RCC_ClockConfig+0x1ec>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0cf      	b.n	8001538 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d010      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	4b66      	ldr	r3, [pc, #408]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d908      	bls.n	80013c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b4:	4b63      	ldr	r3, [pc, #396]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4960      	ldr	r1, [pc, #384]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d04c      	beq.n	800146c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d107      	bne.n	80013ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013da:	4b5a      	ldr	r3, [pc, #360]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d121      	bne.n	800142a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0a6      	b.n	8001538 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f2:	4b54      	ldr	r3, [pc, #336]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d115      	bne.n	800142a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e09a      	b.n	8001538 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140a:	4b4e      	ldr	r3, [pc, #312]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e08e      	b.n	8001538 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141a:	4b4a      	ldr	r3, [pc, #296]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e086      	b.n	8001538 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800142a:	4b46      	ldr	r3, [pc, #280]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f023 0203 	bic.w	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4943      	ldr	r1, [pc, #268]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 8001438:	4313      	orrs	r3, r2
 800143a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800143c:	f7ff fa58 	bl	80008f0 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	e00a      	b.n	800145a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001444:	f7ff fa54 	bl	80008f0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e06e      	b.n	8001538 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	4b3a      	ldr	r3, [pc, #232]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 020c 	and.w	r2, r3, #12
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	429a      	cmp	r2, r3
 800146a:	d1eb      	bne.n	8001444 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d010      	beq.n	800149a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	4b31      	ldr	r3, [pc, #196]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001484:	429a      	cmp	r2, r3
 8001486:	d208      	bcs.n	800149a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b2e      	ldr	r3, [pc, #184]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	492b      	ldr	r1, [pc, #172]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800149a:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <HAL_RCC_ClockConfig+0x1ec>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d210      	bcs.n	80014ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a8:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <HAL_RCC_ClockConfig+0x1ec>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 0207 	bic.w	r2, r3, #7
 80014b0:	4923      	ldr	r1, [pc, #140]	@ (8001540 <HAL_RCC_ClockConfig+0x1ec>)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b8:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <HAL_RCC_ClockConfig+0x1ec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e036      	b.n	8001538 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	4918      	ldr	r1, [pc, #96]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d009      	beq.n	8001508 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4910      	ldr	r1, [pc, #64]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001508:	f000 f824 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	490b      	ldr	r1, [pc, #44]	@ (8001548 <HAL_RCC_ClockConfig+0x1f4>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <HAL_RCC_ClockConfig+0x1f8>)
 8001526:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_RCC_ClockConfig+0x1fc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f98f 	bl	8000850 <HAL_InitTick>
 8001532:	4603      	mov	r3, r0
 8001534:	72fb      	strb	r3, [r7, #11]

  return status;
 8001536:	7afb      	ldrb	r3, [r7, #11]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40022000 	.word	0x40022000
 8001544:	40021000 	.word	0x40021000
 8001548:	080020d4 	.word	0x080020d4
 800154c:	20000004 	.word	0x20000004
 8001550:	20000008 	.word	0x20000008

08001554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	@ 0x24
 8001558:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001562:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156c:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0x34>
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	d121      	bne.n	80015c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d11e      	bne.n	80015c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001588:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001594:	4b31      	ldr	r3, [pc, #196]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 8001596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e005      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001660 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10d      	bne.n	80015dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d102      	bne.n	80015d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <HAL_RCC_GetSysClockFreq+0x110>)
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	e004      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015d8:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <HAL_RCC_GetSysClockFreq+0x114>)
 80015da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d134      	bne.n	800164c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015e2:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_GetSysClockFreq+0xa6>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d003      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0xac>
 80015f8:	e005      	b.n	8001606 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_RCC_GetSysClockFreq+0x110>)
 80015fc:	617b      	str	r3, [r7, #20]
      break;
 80015fe:	e005      	b.n	800160c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <HAL_RCC_GetSysClockFreq+0x114>)
 8001602:	617b      	str	r3, [r7, #20]
      break;
 8001604:	e002      	b.n	800160c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	617b      	str	r3, [r7, #20]
      break;
 800160a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	3301      	adds	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	fb03 f202 	mul.w	r2, r3, r2
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_RCC_GetSysClockFreq+0x108>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	0e5b      	lsrs	r3, r3, #25
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	3301      	adds	r3, #1
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800164c:	69bb      	ldr	r3, [r7, #24]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	080020e4 	.word	0x080020e4
 8001664:	00f42400 	.word	0x00f42400
 8001668:	007a1200 	.word	0x007a1200

0800166c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001684:	f7ff fa26 	bl	8000ad4 <HAL_PWREx_GetVoltageRange>
 8001688:	6178      	str	r0, [r7, #20]
 800168a:	e014      	b.n	80016b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001690:	4a24      	ldr	r2, [pc, #144]	@ (8001724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	@ 0x58
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016a4:	f7ff fa16 	bl	8000ad4 <HAL_PWREx_GetVoltageRange>
 80016a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016bc:	d10b      	bne.n	80016d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b80      	cmp	r3, #128	@ 0x80
 80016c2:	d919      	bls.n	80016f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80016c8:	d902      	bls.n	80016d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016ca:	2302      	movs	r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e013      	b.n	80016f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	e010      	b.n	80016f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b80      	cmp	r3, #128	@ 0x80
 80016da:	d902      	bls.n	80016e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80016dc:	2303      	movs	r3, #3
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	e00a      	b.n	80016f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b80      	cmp	r3, #128	@ 0x80
 80016e6:	d102      	bne.n	80016ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	e004      	b.n	80016f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b70      	cmp	r3, #112	@ 0x70
 80016f2:	d101      	bne.n	80016f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016f4:	2301      	movs	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 0207 	bic.w	r2, r3, #7
 8001700:	4909      	ldr	r1, [pc, #36]	@ (8001728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001708:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	429a      	cmp	r2, r3
 8001714:	d001      	beq.n	800171a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	40022000 	.word	0x40022000

0800172c <siprintf>:
 800172c:	b40e      	push	{r1, r2, r3}
 800172e:	b500      	push	{lr}
 8001730:	b09c      	sub	sp, #112	@ 0x70
 8001732:	ab1d      	add	r3, sp, #116	@ 0x74
 8001734:	9002      	str	r0, [sp, #8]
 8001736:	9006      	str	r0, [sp, #24]
 8001738:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800173c:	4809      	ldr	r0, [pc, #36]	@ (8001764 <siprintf+0x38>)
 800173e:	9107      	str	r1, [sp, #28]
 8001740:	9104      	str	r1, [sp, #16]
 8001742:	4909      	ldr	r1, [pc, #36]	@ (8001768 <siprintf+0x3c>)
 8001744:	f853 2b04 	ldr.w	r2, [r3], #4
 8001748:	9105      	str	r1, [sp, #20]
 800174a:	6800      	ldr	r0, [r0, #0]
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	a902      	add	r1, sp, #8
 8001750:	f000 f89c 	bl	800188c <_svfiprintf_r>
 8001754:	9b02      	ldr	r3, [sp, #8]
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	b01c      	add	sp, #112	@ 0x70
 800175c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001760:	b003      	add	sp, #12
 8001762:	4770      	bx	lr
 8001764:	20000010 	.word	0x20000010
 8001768:	ffff0208 	.word	0xffff0208

0800176c <memset>:
 800176c:	4402      	add	r2, r0
 800176e:	4603      	mov	r3, r0
 8001770:	4293      	cmp	r3, r2
 8001772:	d100      	bne.n	8001776 <memset+0xa>
 8001774:	4770      	bx	lr
 8001776:	f803 1b01 	strb.w	r1, [r3], #1
 800177a:	e7f9      	b.n	8001770 <memset+0x4>

0800177c <__errno>:
 800177c:	4b01      	ldr	r3, [pc, #4]	@ (8001784 <__errno+0x8>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000010 	.word	0x20000010

08001788 <__libc_init_array>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	4d0d      	ldr	r5, [pc, #52]	@ (80017c0 <__libc_init_array+0x38>)
 800178c:	4c0d      	ldr	r4, [pc, #52]	@ (80017c4 <__libc_init_array+0x3c>)
 800178e:	1b64      	subs	r4, r4, r5
 8001790:	10a4      	asrs	r4, r4, #2
 8001792:	2600      	movs	r6, #0
 8001794:	42a6      	cmp	r6, r4
 8001796:	d109      	bne.n	80017ac <__libc_init_array+0x24>
 8001798:	4d0b      	ldr	r5, [pc, #44]	@ (80017c8 <__libc_init_array+0x40>)
 800179a:	4c0c      	ldr	r4, [pc, #48]	@ (80017cc <__libc_init_array+0x44>)
 800179c:	f000 fc66 	bl	800206c <_init>
 80017a0:	1b64      	subs	r4, r4, r5
 80017a2:	10a4      	asrs	r4, r4, #2
 80017a4:	2600      	movs	r6, #0
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d105      	bne.n	80017b6 <__libc_init_array+0x2e>
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b0:	4798      	blx	r3
 80017b2:	3601      	adds	r6, #1
 80017b4:	e7ee      	b.n	8001794 <__libc_init_array+0xc>
 80017b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ba:	4798      	blx	r3
 80017bc:	3601      	adds	r6, #1
 80017be:	e7f2      	b.n	80017a6 <__libc_init_array+0x1e>
 80017c0:	08002150 	.word	0x08002150
 80017c4:	08002150 	.word	0x08002150
 80017c8:	08002150 	.word	0x08002150
 80017cc:	08002154 	.word	0x08002154

080017d0 <__retarget_lock_acquire_recursive>:
 80017d0:	4770      	bx	lr

080017d2 <__retarget_lock_release_recursive>:
 80017d2:	4770      	bx	lr

080017d4 <__ssputs_r>:
 80017d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017d8:	688e      	ldr	r6, [r1, #8]
 80017da:	461f      	mov	r7, r3
 80017dc:	42be      	cmp	r6, r7
 80017de:	680b      	ldr	r3, [r1, #0]
 80017e0:	4682      	mov	sl, r0
 80017e2:	460c      	mov	r4, r1
 80017e4:	4690      	mov	r8, r2
 80017e6:	d82d      	bhi.n	8001844 <__ssputs_r+0x70>
 80017e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80017ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80017f0:	d026      	beq.n	8001840 <__ssputs_r+0x6c>
 80017f2:	6965      	ldr	r5, [r4, #20]
 80017f4:	6909      	ldr	r1, [r1, #16]
 80017f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017fa:	eba3 0901 	sub.w	r9, r3, r1
 80017fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001802:	1c7b      	adds	r3, r7, #1
 8001804:	444b      	add	r3, r9
 8001806:	106d      	asrs	r5, r5, #1
 8001808:	429d      	cmp	r5, r3
 800180a:	bf38      	it	cc
 800180c:	461d      	movcc	r5, r3
 800180e:	0553      	lsls	r3, r2, #21
 8001810:	d527      	bpl.n	8001862 <__ssputs_r+0x8e>
 8001812:	4629      	mov	r1, r5
 8001814:	f000 f958 	bl	8001ac8 <_malloc_r>
 8001818:	4606      	mov	r6, r0
 800181a:	b360      	cbz	r0, 8001876 <__ssputs_r+0xa2>
 800181c:	6921      	ldr	r1, [r4, #16]
 800181e:	464a      	mov	r2, r9
 8001820:	f000 fbc4 	bl	8001fac <memcpy>
 8001824:	89a3      	ldrh	r3, [r4, #12]
 8001826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800182a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800182e:	81a3      	strh	r3, [r4, #12]
 8001830:	6126      	str	r6, [r4, #16]
 8001832:	6165      	str	r5, [r4, #20]
 8001834:	444e      	add	r6, r9
 8001836:	eba5 0509 	sub.w	r5, r5, r9
 800183a:	6026      	str	r6, [r4, #0]
 800183c:	60a5      	str	r5, [r4, #8]
 800183e:	463e      	mov	r6, r7
 8001840:	42be      	cmp	r6, r7
 8001842:	d900      	bls.n	8001846 <__ssputs_r+0x72>
 8001844:	463e      	mov	r6, r7
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	4632      	mov	r2, r6
 800184a:	4641      	mov	r1, r8
 800184c:	f000 fb84 	bl	8001f58 <memmove>
 8001850:	68a3      	ldr	r3, [r4, #8]
 8001852:	1b9b      	subs	r3, r3, r6
 8001854:	60a3      	str	r3, [r4, #8]
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	4433      	add	r3, r6
 800185a:	6023      	str	r3, [r4, #0]
 800185c:	2000      	movs	r0, #0
 800185e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001862:	462a      	mov	r2, r5
 8001864:	f000 fb4a 	bl	8001efc <_realloc_r>
 8001868:	4606      	mov	r6, r0
 800186a:	2800      	cmp	r0, #0
 800186c:	d1e0      	bne.n	8001830 <__ssputs_r+0x5c>
 800186e:	6921      	ldr	r1, [r4, #16]
 8001870:	4650      	mov	r0, sl
 8001872:	f000 fba9 	bl	8001fc8 <_free_r>
 8001876:	230c      	movs	r3, #12
 8001878:	f8ca 3000 	str.w	r3, [sl]
 800187c:	89a3      	ldrh	r3, [r4, #12]
 800187e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001882:	81a3      	strh	r3, [r4, #12]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001888:	e7e9      	b.n	800185e <__ssputs_r+0x8a>
	...

0800188c <_svfiprintf_r>:
 800188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001890:	4698      	mov	r8, r3
 8001892:	898b      	ldrh	r3, [r1, #12]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	b09d      	sub	sp, #116	@ 0x74
 8001898:	4607      	mov	r7, r0
 800189a:	460d      	mov	r5, r1
 800189c:	4614      	mov	r4, r2
 800189e:	d510      	bpl.n	80018c2 <_svfiprintf_r+0x36>
 80018a0:	690b      	ldr	r3, [r1, #16]
 80018a2:	b973      	cbnz	r3, 80018c2 <_svfiprintf_r+0x36>
 80018a4:	2140      	movs	r1, #64	@ 0x40
 80018a6:	f000 f90f 	bl	8001ac8 <_malloc_r>
 80018aa:	6028      	str	r0, [r5, #0]
 80018ac:	6128      	str	r0, [r5, #16]
 80018ae:	b930      	cbnz	r0, 80018be <_svfiprintf_r+0x32>
 80018b0:	230c      	movs	r3, #12
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018b8:	b01d      	add	sp, #116	@ 0x74
 80018ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018be:	2340      	movs	r3, #64	@ 0x40
 80018c0:	616b      	str	r3, [r5, #20]
 80018c2:	2300      	movs	r3, #0
 80018c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80018c6:	2320      	movs	r3, #32
 80018c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80018cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80018d0:	2330      	movs	r3, #48	@ 0x30
 80018d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001a70 <_svfiprintf_r+0x1e4>
 80018d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80018da:	f04f 0901 	mov.w	r9, #1
 80018de:	4623      	mov	r3, r4
 80018e0:	469a      	mov	sl, r3
 80018e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018e6:	b10a      	cbz	r2, 80018ec <_svfiprintf_r+0x60>
 80018e8:	2a25      	cmp	r2, #37	@ 0x25
 80018ea:	d1f9      	bne.n	80018e0 <_svfiprintf_r+0x54>
 80018ec:	ebba 0b04 	subs.w	fp, sl, r4
 80018f0:	d00b      	beq.n	800190a <_svfiprintf_r+0x7e>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4622      	mov	r2, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	4638      	mov	r0, r7
 80018fa:	f7ff ff6b 	bl	80017d4 <__ssputs_r>
 80018fe:	3001      	adds	r0, #1
 8001900:	f000 80a7 	beq.w	8001a52 <_svfiprintf_r+0x1c6>
 8001904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001906:	445a      	add	r2, fp
 8001908:	9209      	str	r2, [sp, #36]	@ 0x24
 800190a:	f89a 3000 	ldrb.w	r3, [sl]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 809f 	beq.w	8001a52 <_svfiprintf_r+0x1c6>
 8001914:	2300      	movs	r3, #0
 8001916:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800191a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800191e:	f10a 0a01 	add.w	sl, sl, #1
 8001922:	9304      	str	r3, [sp, #16]
 8001924:	9307      	str	r3, [sp, #28]
 8001926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800192a:	931a      	str	r3, [sp, #104]	@ 0x68
 800192c:	4654      	mov	r4, sl
 800192e:	2205      	movs	r2, #5
 8001930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001934:	484e      	ldr	r0, [pc, #312]	@ (8001a70 <_svfiprintf_r+0x1e4>)
 8001936:	f7fe fc4b 	bl	80001d0 <memchr>
 800193a:	9a04      	ldr	r2, [sp, #16]
 800193c:	b9d8      	cbnz	r0, 8001976 <_svfiprintf_r+0xea>
 800193e:	06d0      	lsls	r0, r2, #27
 8001940:	bf44      	itt	mi
 8001942:	2320      	movmi	r3, #32
 8001944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001948:	0711      	lsls	r1, r2, #28
 800194a:	bf44      	itt	mi
 800194c:	232b      	movmi	r3, #43	@ 0x2b
 800194e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001952:	f89a 3000 	ldrb.w	r3, [sl]
 8001956:	2b2a      	cmp	r3, #42	@ 0x2a
 8001958:	d015      	beq.n	8001986 <_svfiprintf_r+0xfa>
 800195a:	9a07      	ldr	r2, [sp, #28]
 800195c:	4654      	mov	r4, sl
 800195e:	2000      	movs	r0, #0
 8001960:	f04f 0c0a 	mov.w	ip, #10
 8001964:	4621      	mov	r1, r4
 8001966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800196a:	3b30      	subs	r3, #48	@ 0x30
 800196c:	2b09      	cmp	r3, #9
 800196e:	d94b      	bls.n	8001a08 <_svfiprintf_r+0x17c>
 8001970:	b1b0      	cbz	r0, 80019a0 <_svfiprintf_r+0x114>
 8001972:	9207      	str	r2, [sp, #28]
 8001974:	e014      	b.n	80019a0 <_svfiprintf_r+0x114>
 8001976:	eba0 0308 	sub.w	r3, r0, r8
 800197a:	fa09 f303 	lsl.w	r3, r9, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	9304      	str	r3, [sp, #16]
 8001982:	46a2      	mov	sl, r4
 8001984:	e7d2      	b.n	800192c <_svfiprintf_r+0xa0>
 8001986:	9b03      	ldr	r3, [sp, #12]
 8001988:	1d19      	adds	r1, r3, #4
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	9103      	str	r1, [sp, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	bfbb      	ittet	lt
 8001992:	425b      	neglt	r3, r3
 8001994:	f042 0202 	orrlt.w	r2, r2, #2
 8001998:	9307      	strge	r3, [sp, #28]
 800199a:	9307      	strlt	r3, [sp, #28]
 800199c:	bfb8      	it	lt
 800199e:	9204      	strlt	r2, [sp, #16]
 80019a0:	7823      	ldrb	r3, [r4, #0]
 80019a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80019a4:	d10a      	bne.n	80019bc <_svfiprintf_r+0x130>
 80019a6:	7863      	ldrb	r3, [r4, #1]
 80019a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80019aa:	d132      	bne.n	8001a12 <_svfiprintf_r+0x186>
 80019ac:	9b03      	ldr	r3, [sp, #12]
 80019ae:	1d1a      	adds	r2, r3, #4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	9203      	str	r2, [sp, #12]
 80019b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80019b8:	3402      	adds	r4, #2
 80019ba:	9305      	str	r3, [sp, #20]
 80019bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001a80 <_svfiprintf_r+0x1f4>
 80019c0:	7821      	ldrb	r1, [r4, #0]
 80019c2:	2203      	movs	r2, #3
 80019c4:	4650      	mov	r0, sl
 80019c6:	f7fe fc03 	bl	80001d0 <memchr>
 80019ca:	b138      	cbz	r0, 80019dc <_svfiprintf_r+0x150>
 80019cc:	9b04      	ldr	r3, [sp, #16]
 80019ce:	eba0 000a 	sub.w	r0, r0, sl
 80019d2:	2240      	movs	r2, #64	@ 0x40
 80019d4:	4082      	lsls	r2, r0
 80019d6:	4313      	orrs	r3, r2
 80019d8:	3401      	adds	r4, #1
 80019da:	9304      	str	r3, [sp, #16]
 80019dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019e0:	4824      	ldr	r0, [pc, #144]	@ (8001a74 <_svfiprintf_r+0x1e8>)
 80019e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80019e6:	2206      	movs	r2, #6
 80019e8:	f7fe fbf2 	bl	80001d0 <memchr>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d036      	beq.n	8001a5e <_svfiprintf_r+0x1d2>
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <_svfiprintf_r+0x1ec>)
 80019f2:	bb1b      	cbnz	r3, 8001a3c <_svfiprintf_r+0x1b0>
 80019f4:	9b03      	ldr	r3, [sp, #12]
 80019f6:	3307      	adds	r3, #7
 80019f8:	f023 0307 	bic.w	r3, r3, #7
 80019fc:	3308      	adds	r3, #8
 80019fe:	9303      	str	r3, [sp, #12]
 8001a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a02:	4433      	add	r3, r6
 8001a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a06:	e76a      	b.n	80018de <_svfiprintf_r+0x52>
 8001a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e7a8      	b.n	8001964 <_svfiprintf_r+0xd8>
 8001a12:	2300      	movs	r3, #0
 8001a14:	3401      	adds	r4, #1
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 0c0a 	mov.w	ip, #10
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a24:	3a30      	subs	r2, #48	@ 0x30
 8001a26:	2a09      	cmp	r2, #9
 8001a28:	d903      	bls.n	8001a32 <_svfiprintf_r+0x1a6>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0c6      	beq.n	80019bc <_svfiprintf_r+0x130>
 8001a2e:	9105      	str	r1, [sp, #20]
 8001a30:	e7c4      	b.n	80019bc <_svfiprintf_r+0x130>
 8001a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a36:	4604      	mov	r4, r0
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e7f0      	b.n	8001a1e <_svfiprintf_r+0x192>
 8001a3c:	ab03      	add	r3, sp, #12
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	462a      	mov	r2, r5
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <_svfiprintf_r+0x1f0>)
 8001a44:	a904      	add	r1, sp, #16
 8001a46:	4638      	mov	r0, r7
 8001a48:	f3af 8000 	nop.w
 8001a4c:	1c42      	adds	r2, r0, #1
 8001a4e:	4606      	mov	r6, r0
 8001a50:	d1d6      	bne.n	8001a00 <_svfiprintf_r+0x174>
 8001a52:	89ab      	ldrh	r3, [r5, #12]
 8001a54:	065b      	lsls	r3, r3, #25
 8001a56:	f53f af2d 	bmi.w	80018b4 <_svfiprintf_r+0x28>
 8001a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a5c:	e72c      	b.n	80018b8 <_svfiprintf_r+0x2c>
 8001a5e:	ab03      	add	r3, sp, #12
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	462a      	mov	r2, r5
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <_svfiprintf_r+0x1f0>)
 8001a66:	a904      	add	r1, sp, #16
 8001a68:	4638      	mov	r0, r7
 8001a6a:	f000 f91b 	bl	8001ca4 <_printf_i>
 8001a6e:	e7ed      	b.n	8001a4c <_svfiprintf_r+0x1c0>
 8001a70:	08002114 	.word	0x08002114
 8001a74:	0800211e 	.word	0x0800211e
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	080017d5 	.word	0x080017d5
 8001a80:	0800211a 	.word	0x0800211a

08001a84 <sbrk_aligned>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	4e0f      	ldr	r6, [pc, #60]	@ (8001ac4 <sbrk_aligned+0x40>)
 8001a88:	460c      	mov	r4, r1
 8001a8a:	6831      	ldr	r1, [r6, #0]
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	b911      	cbnz	r1, 8001a96 <sbrk_aligned+0x12>
 8001a90:	f000 fa7c 	bl	8001f8c <_sbrk_r>
 8001a94:	6030      	str	r0, [r6, #0]
 8001a96:	4621      	mov	r1, r4
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 fa77 	bl	8001f8c <_sbrk_r>
 8001a9e:	1c43      	adds	r3, r0, #1
 8001aa0:	d103      	bne.n	8001aaa <sbrk_aligned+0x26>
 8001aa2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
 8001aaa:	1cc4      	adds	r4, r0, #3
 8001aac:	f024 0403 	bic.w	r4, r4, #3
 8001ab0:	42a0      	cmp	r0, r4
 8001ab2:	d0f8      	beq.n	8001aa6 <sbrk_aligned+0x22>
 8001ab4:	1a21      	subs	r1, r4, r0
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 fa68 	bl	8001f8c <_sbrk_r>
 8001abc:	3001      	adds	r0, #1
 8001abe:	d1f2      	bne.n	8001aa6 <sbrk_aligned+0x22>
 8001ac0:	e7ef      	b.n	8001aa2 <sbrk_aligned+0x1e>
 8001ac2:	bf00      	nop
 8001ac4:	200001c0 	.word	0x200001c0

08001ac8 <_malloc_r>:
 8001ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001acc:	1ccd      	adds	r5, r1, #3
 8001ace:	f025 0503 	bic.w	r5, r5, #3
 8001ad2:	3508      	adds	r5, #8
 8001ad4:	2d0c      	cmp	r5, #12
 8001ad6:	bf38      	it	cc
 8001ad8:	250c      	movcc	r5, #12
 8001ada:	2d00      	cmp	r5, #0
 8001adc:	4606      	mov	r6, r0
 8001ade:	db01      	blt.n	8001ae4 <_malloc_r+0x1c>
 8001ae0:	42a9      	cmp	r1, r5
 8001ae2:	d904      	bls.n	8001aee <_malloc_r+0x26>
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	6033      	str	r3, [r6, #0]
 8001ae8:	2000      	movs	r0, #0
 8001aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001bc4 <_malloc_r+0xfc>
 8001af2:	f000 f9f7 	bl	8001ee4 <__malloc_lock>
 8001af6:	f8d8 3000 	ldr.w	r3, [r8]
 8001afa:	461c      	mov	r4, r3
 8001afc:	bb44      	cbnz	r4, 8001b50 <_malloc_r+0x88>
 8001afe:	4629      	mov	r1, r5
 8001b00:	4630      	mov	r0, r6
 8001b02:	f7ff ffbf 	bl	8001a84 <sbrk_aligned>
 8001b06:	1c43      	adds	r3, r0, #1
 8001b08:	4604      	mov	r4, r0
 8001b0a:	d158      	bne.n	8001bbe <_malloc_r+0xf6>
 8001b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8001b10:	4627      	mov	r7, r4
 8001b12:	2f00      	cmp	r7, #0
 8001b14:	d143      	bne.n	8001b9e <_malloc_r+0xd6>
 8001b16:	2c00      	cmp	r4, #0
 8001b18:	d04b      	beq.n	8001bb2 <_malloc_r+0xea>
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	4639      	mov	r1, r7
 8001b1e:	4630      	mov	r0, r6
 8001b20:	eb04 0903 	add.w	r9, r4, r3
 8001b24:	f000 fa32 	bl	8001f8c <_sbrk_r>
 8001b28:	4581      	cmp	r9, r0
 8001b2a:	d142      	bne.n	8001bb2 <_malloc_r+0xea>
 8001b2c:	6821      	ldr	r1, [r4, #0]
 8001b2e:	1a6d      	subs	r5, r5, r1
 8001b30:	4629      	mov	r1, r5
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7ff ffa6 	bl	8001a84 <sbrk_aligned>
 8001b38:	3001      	adds	r0, #1
 8001b3a:	d03a      	beq.n	8001bb2 <_malloc_r+0xea>
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	442b      	add	r3, r5
 8001b40:	6023      	str	r3, [r4, #0]
 8001b42:	f8d8 3000 	ldr.w	r3, [r8]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	bb62      	cbnz	r2, 8001ba4 <_malloc_r+0xdc>
 8001b4a:	f8c8 7000 	str.w	r7, [r8]
 8001b4e:	e00f      	b.n	8001b70 <_malloc_r+0xa8>
 8001b50:	6822      	ldr	r2, [r4, #0]
 8001b52:	1b52      	subs	r2, r2, r5
 8001b54:	d420      	bmi.n	8001b98 <_malloc_r+0xd0>
 8001b56:	2a0b      	cmp	r2, #11
 8001b58:	d917      	bls.n	8001b8a <_malloc_r+0xc2>
 8001b5a:	1961      	adds	r1, r4, r5
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	6025      	str	r5, [r4, #0]
 8001b60:	bf18      	it	ne
 8001b62:	6059      	strne	r1, [r3, #4]
 8001b64:	6863      	ldr	r3, [r4, #4]
 8001b66:	bf08      	it	eq
 8001b68:	f8c8 1000 	streq.w	r1, [r8]
 8001b6c:	5162      	str	r2, [r4, r5]
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	4630      	mov	r0, r6
 8001b72:	f000 f9bd 	bl	8001ef0 <__malloc_unlock>
 8001b76:	f104 000b 	add.w	r0, r4, #11
 8001b7a:	1d23      	adds	r3, r4, #4
 8001b7c:	f020 0007 	bic.w	r0, r0, #7
 8001b80:	1ac2      	subs	r2, r0, r3
 8001b82:	bf1c      	itt	ne
 8001b84:	1a1b      	subne	r3, r3, r0
 8001b86:	50a3      	strne	r3, [r4, r2]
 8001b88:	e7af      	b.n	8001aea <_malloc_r+0x22>
 8001b8a:	6862      	ldr	r2, [r4, #4]
 8001b8c:	42a3      	cmp	r3, r4
 8001b8e:	bf0c      	ite	eq
 8001b90:	f8c8 2000 	streq.w	r2, [r8]
 8001b94:	605a      	strne	r2, [r3, #4]
 8001b96:	e7eb      	b.n	8001b70 <_malloc_r+0xa8>
 8001b98:	4623      	mov	r3, r4
 8001b9a:	6864      	ldr	r4, [r4, #4]
 8001b9c:	e7ae      	b.n	8001afc <_malloc_r+0x34>
 8001b9e:	463c      	mov	r4, r7
 8001ba0:	687f      	ldr	r7, [r7, #4]
 8001ba2:	e7b6      	b.n	8001b12 <_malloc_r+0x4a>
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	42a3      	cmp	r3, r4
 8001baa:	d1fb      	bne.n	8001ba4 <_malloc_r+0xdc>
 8001bac:	2300      	movs	r3, #0
 8001bae:	6053      	str	r3, [r2, #4]
 8001bb0:	e7de      	b.n	8001b70 <_malloc_r+0xa8>
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	6033      	str	r3, [r6, #0]
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	f000 f99a 	bl	8001ef0 <__malloc_unlock>
 8001bbc:	e794      	b.n	8001ae8 <_malloc_r+0x20>
 8001bbe:	6005      	str	r5, [r0, #0]
 8001bc0:	e7d6      	b.n	8001b70 <_malloc_r+0xa8>
 8001bc2:	bf00      	nop
 8001bc4:	200001c4 	.word	0x200001c4

08001bc8 <_printf_common>:
 8001bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bcc:	4616      	mov	r6, r2
 8001bce:	4698      	mov	r8, r3
 8001bd0:	688a      	ldr	r2, [r1, #8]
 8001bd2:	690b      	ldr	r3, [r1, #16]
 8001bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	bfb8      	it	lt
 8001bdc:	4613      	movlt	r3, r2
 8001bde:	6033      	str	r3, [r6, #0]
 8001be0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001be4:	4607      	mov	r7, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	b10a      	cbz	r2, 8001bee <_printf_common+0x26>
 8001bea:	3301      	adds	r3, #1
 8001bec:	6033      	str	r3, [r6, #0]
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	0699      	lsls	r1, r3, #26
 8001bf2:	bf42      	ittt	mi
 8001bf4:	6833      	ldrmi	r3, [r6, #0]
 8001bf6:	3302      	addmi	r3, #2
 8001bf8:	6033      	strmi	r3, [r6, #0]
 8001bfa:	6825      	ldr	r5, [r4, #0]
 8001bfc:	f015 0506 	ands.w	r5, r5, #6
 8001c00:	d106      	bne.n	8001c10 <_printf_common+0x48>
 8001c02:	f104 0a19 	add.w	sl, r4, #25
 8001c06:	68e3      	ldr	r3, [r4, #12]
 8001c08:	6832      	ldr	r2, [r6, #0]
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	42ab      	cmp	r3, r5
 8001c0e:	dc26      	bgt.n	8001c5e <_printf_common+0x96>
 8001c10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	3b00      	subs	r3, #0
 8001c18:	bf18      	it	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	0692      	lsls	r2, r2, #26
 8001c1e:	d42b      	bmi.n	8001c78 <_printf_common+0xb0>
 8001c20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001c24:	4641      	mov	r1, r8
 8001c26:	4638      	mov	r0, r7
 8001c28:	47c8      	blx	r9
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	d01e      	beq.n	8001c6c <_printf_common+0xa4>
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	6922      	ldr	r2, [r4, #16]
 8001c32:	f003 0306 	and.w	r3, r3, #6
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf02      	ittt	eq
 8001c3a:	68e5      	ldreq	r5, [r4, #12]
 8001c3c:	6833      	ldreq	r3, [r6, #0]
 8001c3e:	1aed      	subeq	r5, r5, r3
 8001c40:	68a3      	ldr	r3, [r4, #8]
 8001c42:	bf0c      	ite	eq
 8001c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c48:	2500      	movne	r5, #0
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	bfc4      	itt	gt
 8001c4e:	1a9b      	subgt	r3, r3, r2
 8001c50:	18ed      	addgt	r5, r5, r3
 8001c52:	2600      	movs	r6, #0
 8001c54:	341a      	adds	r4, #26
 8001c56:	42b5      	cmp	r5, r6
 8001c58:	d11a      	bne.n	8001c90 <_printf_common+0xc8>
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	e008      	b.n	8001c70 <_printf_common+0xa8>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4652      	mov	r2, sl
 8001c62:	4641      	mov	r1, r8
 8001c64:	4638      	mov	r0, r7
 8001c66:	47c8      	blx	r9
 8001c68:	3001      	adds	r0, #1
 8001c6a:	d103      	bne.n	8001c74 <_printf_common+0xac>
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c74:	3501      	adds	r5, #1
 8001c76:	e7c6      	b.n	8001c06 <_printf_common+0x3e>
 8001c78:	18e1      	adds	r1, r4, r3
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	2030      	movs	r0, #48	@ 0x30
 8001c7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c82:	4422      	add	r2, r4
 8001c84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	e7c7      	b.n	8001c20 <_printf_common+0x58>
 8001c90:	2301      	movs	r3, #1
 8001c92:	4622      	mov	r2, r4
 8001c94:	4641      	mov	r1, r8
 8001c96:	4638      	mov	r0, r7
 8001c98:	47c8      	blx	r9
 8001c9a:	3001      	adds	r0, #1
 8001c9c:	d0e6      	beq.n	8001c6c <_printf_common+0xa4>
 8001c9e:	3601      	adds	r6, #1
 8001ca0:	e7d9      	b.n	8001c56 <_printf_common+0x8e>
	...

08001ca4 <_printf_i>:
 8001ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ca8:	7e0f      	ldrb	r7, [r1, #24]
 8001caa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001cac:	2f78      	cmp	r7, #120	@ 0x78
 8001cae:	4691      	mov	r9, r2
 8001cb0:	4680      	mov	r8, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	469a      	mov	sl, r3
 8001cb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001cba:	d807      	bhi.n	8001ccc <_printf_i+0x28>
 8001cbc:	2f62      	cmp	r7, #98	@ 0x62
 8001cbe:	d80a      	bhi.n	8001cd6 <_printf_i+0x32>
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	f000 80d2 	beq.w	8001e6a <_printf_i+0x1c6>
 8001cc6:	2f58      	cmp	r7, #88	@ 0x58
 8001cc8:	f000 80b9 	beq.w	8001e3e <_printf_i+0x19a>
 8001ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001cd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001cd4:	e03a      	b.n	8001d4c <_printf_i+0xa8>
 8001cd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001cda:	2b15      	cmp	r3, #21
 8001cdc:	d8f6      	bhi.n	8001ccc <_printf_i+0x28>
 8001cde:	a101      	add	r1, pc, #4	@ (adr r1, 8001ce4 <_printf_i+0x40>)
 8001ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ce4:	08001d3d 	.word	0x08001d3d
 8001ce8:	08001d51 	.word	0x08001d51
 8001cec:	08001ccd 	.word	0x08001ccd
 8001cf0:	08001ccd 	.word	0x08001ccd
 8001cf4:	08001ccd 	.word	0x08001ccd
 8001cf8:	08001ccd 	.word	0x08001ccd
 8001cfc:	08001d51 	.word	0x08001d51
 8001d00:	08001ccd 	.word	0x08001ccd
 8001d04:	08001ccd 	.word	0x08001ccd
 8001d08:	08001ccd 	.word	0x08001ccd
 8001d0c:	08001ccd 	.word	0x08001ccd
 8001d10:	08001e51 	.word	0x08001e51
 8001d14:	08001d7b 	.word	0x08001d7b
 8001d18:	08001e0b 	.word	0x08001e0b
 8001d1c:	08001ccd 	.word	0x08001ccd
 8001d20:	08001ccd 	.word	0x08001ccd
 8001d24:	08001e73 	.word	0x08001e73
 8001d28:	08001ccd 	.word	0x08001ccd
 8001d2c:	08001d7b 	.word	0x08001d7b
 8001d30:	08001ccd 	.word	0x08001ccd
 8001d34:	08001ccd 	.word	0x08001ccd
 8001d38:	08001e13 	.word	0x08001e13
 8001d3c:	6833      	ldr	r3, [r6, #0]
 8001d3e:	1d1a      	adds	r2, r3, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6032      	str	r2, [r6, #0]
 8001d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e09d      	b.n	8001e8c <_printf_i+0x1e8>
 8001d50:	6833      	ldr	r3, [r6, #0]
 8001d52:	6820      	ldr	r0, [r4, #0]
 8001d54:	1d19      	adds	r1, r3, #4
 8001d56:	6031      	str	r1, [r6, #0]
 8001d58:	0606      	lsls	r6, r0, #24
 8001d5a:	d501      	bpl.n	8001d60 <_printf_i+0xbc>
 8001d5c:	681d      	ldr	r5, [r3, #0]
 8001d5e:	e003      	b.n	8001d68 <_printf_i+0xc4>
 8001d60:	0645      	lsls	r5, r0, #25
 8001d62:	d5fb      	bpl.n	8001d5c <_printf_i+0xb8>
 8001d64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	da03      	bge.n	8001d74 <_printf_i+0xd0>
 8001d6c:	232d      	movs	r3, #45	@ 0x2d
 8001d6e:	426d      	negs	r5, r5
 8001d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d74:	4859      	ldr	r0, [pc, #356]	@ (8001edc <_printf_i+0x238>)
 8001d76:	230a      	movs	r3, #10
 8001d78:	e011      	b.n	8001d9e <_printf_i+0xfa>
 8001d7a:	6821      	ldr	r1, [r4, #0]
 8001d7c:	6833      	ldr	r3, [r6, #0]
 8001d7e:	0608      	lsls	r0, r1, #24
 8001d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d84:	d402      	bmi.n	8001d8c <_printf_i+0xe8>
 8001d86:	0649      	lsls	r1, r1, #25
 8001d88:	bf48      	it	mi
 8001d8a:	b2ad      	uxthmi	r5, r5
 8001d8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d8e:	4853      	ldr	r0, [pc, #332]	@ (8001edc <_printf_i+0x238>)
 8001d90:	6033      	str	r3, [r6, #0]
 8001d92:	bf14      	ite	ne
 8001d94:	230a      	movne	r3, #10
 8001d96:	2308      	moveq	r3, #8
 8001d98:	2100      	movs	r1, #0
 8001d9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d9e:	6866      	ldr	r6, [r4, #4]
 8001da0:	60a6      	str	r6, [r4, #8]
 8001da2:	2e00      	cmp	r6, #0
 8001da4:	bfa2      	ittt	ge
 8001da6:	6821      	ldrge	r1, [r4, #0]
 8001da8:	f021 0104 	bicge.w	r1, r1, #4
 8001dac:	6021      	strge	r1, [r4, #0]
 8001dae:	b90d      	cbnz	r5, 8001db4 <_printf_i+0x110>
 8001db0:	2e00      	cmp	r6, #0
 8001db2:	d04b      	beq.n	8001e4c <_printf_i+0x1a8>
 8001db4:	4616      	mov	r6, r2
 8001db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8001dba:	fb03 5711 	mls	r7, r3, r1, r5
 8001dbe:	5dc7      	ldrb	r7, [r0, r7]
 8001dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001dc4:	462f      	mov	r7, r5
 8001dc6:	42bb      	cmp	r3, r7
 8001dc8:	460d      	mov	r5, r1
 8001dca:	d9f4      	bls.n	8001db6 <_printf_i+0x112>
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d10b      	bne.n	8001de8 <_printf_i+0x144>
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	07df      	lsls	r7, r3, #31
 8001dd4:	d508      	bpl.n	8001de8 <_printf_i+0x144>
 8001dd6:	6923      	ldr	r3, [r4, #16]
 8001dd8:	6861      	ldr	r1, [r4, #4]
 8001dda:	4299      	cmp	r1, r3
 8001ddc:	bfde      	ittt	le
 8001dde:	2330      	movle	r3, #48	@ 0x30
 8001de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001de4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001de8:	1b92      	subs	r2, r2, r6
 8001dea:	6122      	str	r2, [r4, #16]
 8001dec:	f8cd a000 	str.w	sl, [sp]
 8001df0:	464b      	mov	r3, r9
 8001df2:	aa03      	add	r2, sp, #12
 8001df4:	4621      	mov	r1, r4
 8001df6:	4640      	mov	r0, r8
 8001df8:	f7ff fee6 	bl	8001bc8 <_printf_common>
 8001dfc:	3001      	adds	r0, #1
 8001dfe:	d14a      	bne.n	8001e96 <_printf_i+0x1f2>
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e04:	b004      	add	sp, #16
 8001e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	6023      	str	r3, [r4, #0]
 8001e12:	4833      	ldr	r0, [pc, #204]	@ (8001ee0 <_printf_i+0x23c>)
 8001e14:	2778      	movs	r7, #120	@ 0x78
 8001e16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	6831      	ldr	r1, [r6, #0]
 8001e1e:	061f      	lsls	r7, r3, #24
 8001e20:	f851 5b04 	ldr.w	r5, [r1], #4
 8001e24:	d402      	bmi.n	8001e2c <_printf_i+0x188>
 8001e26:	065f      	lsls	r7, r3, #25
 8001e28:	bf48      	it	mi
 8001e2a:	b2ad      	uxthmi	r5, r5
 8001e2c:	6031      	str	r1, [r6, #0]
 8001e2e:	07d9      	lsls	r1, r3, #31
 8001e30:	bf44      	itt	mi
 8001e32:	f043 0320 	orrmi.w	r3, r3, #32
 8001e36:	6023      	strmi	r3, [r4, #0]
 8001e38:	b11d      	cbz	r5, 8001e42 <_printf_i+0x19e>
 8001e3a:	2310      	movs	r3, #16
 8001e3c:	e7ac      	b.n	8001d98 <_printf_i+0xf4>
 8001e3e:	4827      	ldr	r0, [pc, #156]	@ (8001edc <_printf_i+0x238>)
 8001e40:	e7e9      	b.n	8001e16 <_printf_i+0x172>
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	f023 0320 	bic.w	r3, r3, #32
 8001e48:	6023      	str	r3, [r4, #0]
 8001e4a:	e7f6      	b.n	8001e3a <_printf_i+0x196>
 8001e4c:	4616      	mov	r6, r2
 8001e4e:	e7bd      	b.n	8001dcc <_printf_i+0x128>
 8001e50:	6833      	ldr	r3, [r6, #0]
 8001e52:	6825      	ldr	r5, [r4, #0]
 8001e54:	6961      	ldr	r1, [r4, #20]
 8001e56:	1d18      	adds	r0, r3, #4
 8001e58:	6030      	str	r0, [r6, #0]
 8001e5a:	062e      	lsls	r6, r5, #24
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	d501      	bpl.n	8001e64 <_printf_i+0x1c0>
 8001e60:	6019      	str	r1, [r3, #0]
 8001e62:	e002      	b.n	8001e6a <_printf_i+0x1c6>
 8001e64:	0668      	lsls	r0, r5, #25
 8001e66:	d5fb      	bpl.n	8001e60 <_printf_i+0x1bc>
 8001e68:	8019      	strh	r1, [r3, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6123      	str	r3, [r4, #16]
 8001e6e:	4616      	mov	r6, r2
 8001e70:	e7bc      	b.n	8001dec <_printf_i+0x148>
 8001e72:	6833      	ldr	r3, [r6, #0]
 8001e74:	1d1a      	adds	r2, r3, #4
 8001e76:	6032      	str	r2, [r6, #0]
 8001e78:	681e      	ldr	r6, [r3, #0]
 8001e7a:	6862      	ldr	r2, [r4, #4]
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4630      	mov	r0, r6
 8001e80:	f7fe f9a6 	bl	80001d0 <memchr>
 8001e84:	b108      	cbz	r0, 8001e8a <_printf_i+0x1e6>
 8001e86:	1b80      	subs	r0, r0, r6
 8001e88:	6060      	str	r0, [r4, #4]
 8001e8a:	6863      	ldr	r3, [r4, #4]
 8001e8c:	6123      	str	r3, [r4, #16]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e94:	e7aa      	b.n	8001dec <_printf_i+0x148>
 8001e96:	6923      	ldr	r3, [r4, #16]
 8001e98:	4632      	mov	r2, r6
 8001e9a:	4649      	mov	r1, r9
 8001e9c:	4640      	mov	r0, r8
 8001e9e:	47d0      	blx	sl
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	d0ad      	beq.n	8001e00 <_printf_i+0x15c>
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	079b      	lsls	r3, r3, #30
 8001ea8:	d413      	bmi.n	8001ed2 <_printf_i+0x22e>
 8001eaa:	68e0      	ldr	r0, [r4, #12]
 8001eac:	9b03      	ldr	r3, [sp, #12]
 8001eae:	4298      	cmp	r0, r3
 8001eb0:	bfb8      	it	lt
 8001eb2:	4618      	movlt	r0, r3
 8001eb4:	e7a6      	b.n	8001e04 <_printf_i+0x160>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	4632      	mov	r2, r6
 8001eba:	4649      	mov	r1, r9
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	47d0      	blx	sl
 8001ec0:	3001      	adds	r0, #1
 8001ec2:	d09d      	beq.n	8001e00 <_printf_i+0x15c>
 8001ec4:	3501      	adds	r5, #1
 8001ec6:	68e3      	ldr	r3, [r4, #12]
 8001ec8:	9903      	ldr	r1, [sp, #12]
 8001eca:	1a5b      	subs	r3, r3, r1
 8001ecc:	42ab      	cmp	r3, r5
 8001ece:	dcf2      	bgt.n	8001eb6 <_printf_i+0x212>
 8001ed0:	e7eb      	b.n	8001eaa <_printf_i+0x206>
 8001ed2:	2500      	movs	r5, #0
 8001ed4:	f104 0619 	add.w	r6, r4, #25
 8001ed8:	e7f5      	b.n	8001ec6 <_printf_i+0x222>
 8001eda:	bf00      	nop
 8001edc:	08002125 	.word	0x08002125
 8001ee0:	08002136 	.word	0x08002136

08001ee4 <__malloc_lock>:
 8001ee4:	4801      	ldr	r0, [pc, #4]	@ (8001eec <__malloc_lock+0x8>)
 8001ee6:	f7ff bc73 	b.w	80017d0 <__retarget_lock_acquire_recursive>
 8001eea:	bf00      	nop
 8001eec:	200001bc 	.word	0x200001bc

08001ef0 <__malloc_unlock>:
 8001ef0:	4801      	ldr	r0, [pc, #4]	@ (8001ef8 <__malloc_unlock+0x8>)
 8001ef2:	f7ff bc6e 	b.w	80017d2 <__retarget_lock_release_recursive>
 8001ef6:	bf00      	nop
 8001ef8:	200001bc 	.word	0x200001bc

08001efc <_realloc_r>:
 8001efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f00:	4680      	mov	r8, r0
 8001f02:	4615      	mov	r5, r2
 8001f04:	460c      	mov	r4, r1
 8001f06:	b921      	cbnz	r1, 8001f12 <_realloc_r+0x16>
 8001f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	f7ff bddb 	b.w	8001ac8 <_malloc_r>
 8001f12:	b92a      	cbnz	r2, 8001f20 <_realloc_r+0x24>
 8001f14:	f000 f858 	bl	8001fc8 <_free_r>
 8001f18:	2400      	movs	r4, #0
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f20:	f000 f89c 	bl	800205c <_malloc_usable_size_r>
 8001f24:	4285      	cmp	r5, r0
 8001f26:	4606      	mov	r6, r0
 8001f28:	d802      	bhi.n	8001f30 <_realloc_r+0x34>
 8001f2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001f2e:	d8f4      	bhi.n	8001f1a <_realloc_r+0x1e>
 8001f30:	4629      	mov	r1, r5
 8001f32:	4640      	mov	r0, r8
 8001f34:	f7ff fdc8 	bl	8001ac8 <_malloc_r>
 8001f38:	4607      	mov	r7, r0
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d0ec      	beq.n	8001f18 <_realloc_r+0x1c>
 8001f3e:	42b5      	cmp	r5, r6
 8001f40:	462a      	mov	r2, r5
 8001f42:	4621      	mov	r1, r4
 8001f44:	bf28      	it	cs
 8001f46:	4632      	movcs	r2, r6
 8001f48:	f000 f830 	bl	8001fac <memcpy>
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	4640      	mov	r0, r8
 8001f50:	f000 f83a 	bl	8001fc8 <_free_r>
 8001f54:	463c      	mov	r4, r7
 8001f56:	e7e0      	b.n	8001f1a <_realloc_r+0x1e>

08001f58 <memmove>:
 8001f58:	4288      	cmp	r0, r1
 8001f5a:	b510      	push	{r4, lr}
 8001f5c:	eb01 0402 	add.w	r4, r1, r2
 8001f60:	d902      	bls.n	8001f68 <memmove+0x10>
 8001f62:	4284      	cmp	r4, r0
 8001f64:	4623      	mov	r3, r4
 8001f66:	d807      	bhi.n	8001f78 <memmove+0x20>
 8001f68:	1e43      	subs	r3, r0, #1
 8001f6a:	42a1      	cmp	r1, r4
 8001f6c:	d008      	beq.n	8001f80 <memmove+0x28>
 8001f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f76:	e7f8      	b.n	8001f6a <memmove+0x12>
 8001f78:	4402      	add	r2, r0
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	428a      	cmp	r2, r1
 8001f7e:	d100      	bne.n	8001f82 <memmove+0x2a>
 8001f80:	bd10      	pop	{r4, pc}
 8001f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f8a:	e7f7      	b.n	8001f7c <memmove+0x24>

08001f8c <_sbrk_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	4d06      	ldr	r5, [pc, #24]	@ (8001fa8 <_sbrk_r+0x1c>)
 8001f90:	2300      	movs	r3, #0
 8001f92:	4604      	mov	r4, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	602b      	str	r3, [r5, #0]
 8001f98:	f7fe fbd0 	bl	800073c <_sbrk>
 8001f9c:	1c43      	adds	r3, r0, #1
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk_r+0x1a>
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	b103      	cbz	r3, 8001fa6 <_sbrk_r+0x1a>
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	200001c8 	.word	0x200001c8

08001fac <memcpy>:
 8001fac:	440a      	add	r2, r1
 8001fae:	4291      	cmp	r1, r2
 8001fb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001fb4:	d100      	bne.n	8001fb8 <memcpy+0xc>
 8001fb6:	4770      	bx	lr
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fc2:	4291      	cmp	r1, r2
 8001fc4:	d1f9      	bne.n	8001fba <memcpy+0xe>
 8001fc6:	bd10      	pop	{r4, pc}

08001fc8 <_free_r>:
 8001fc8:	b538      	push	{r3, r4, r5, lr}
 8001fca:	4605      	mov	r5, r0
 8001fcc:	2900      	cmp	r1, #0
 8001fce:	d041      	beq.n	8002054 <_free_r+0x8c>
 8001fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fd4:	1f0c      	subs	r4, r1, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bfb8      	it	lt
 8001fda:	18e4      	addlt	r4, r4, r3
 8001fdc:	f7ff ff82 	bl	8001ee4 <__malloc_lock>
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8002058 <_free_r+0x90>)
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	b933      	cbnz	r3, 8001ff4 <_free_r+0x2c>
 8001fe6:	6063      	str	r3, [r4, #4]
 8001fe8:	6014      	str	r4, [r2, #0]
 8001fea:	4628      	mov	r0, r5
 8001fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ff0:	f7ff bf7e 	b.w	8001ef0 <__malloc_unlock>
 8001ff4:	42a3      	cmp	r3, r4
 8001ff6:	d908      	bls.n	800200a <_free_r+0x42>
 8001ff8:	6820      	ldr	r0, [r4, #0]
 8001ffa:	1821      	adds	r1, r4, r0
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	bf01      	itttt	eq
 8002000:	6819      	ldreq	r1, [r3, #0]
 8002002:	685b      	ldreq	r3, [r3, #4]
 8002004:	1809      	addeq	r1, r1, r0
 8002006:	6021      	streq	r1, [r4, #0]
 8002008:	e7ed      	b.n	8001fe6 <_free_r+0x1e>
 800200a:	461a      	mov	r2, r3
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	b10b      	cbz	r3, 8002014 <_free_r+0x4c>
 8002010:	42a3      	cmp	r3, r4
 8002012:	d9fa      	bls.n	800200a <_free_r+0x42>
 8002014:	6811      	ldr	r1, [r2, #0]
 8002016:	1850      	adds	r0, r2, r1
 8002018:	42a0      	cmp	r0, r4
 800201a:	d10b      	bne.n	8002034 <_free_r+0x6c>
 800201c:	6820      	ldr	r0, [r4, #0]
 800201e:	4401      	add	r1, r0
 8002020:	1850      	adds	r0, r2, r1
 8002022:	4283      	cmp	r3, r0
 8002024:	6011      	str	r1, [r2, #0]
 8002026:	d1e0      	bne.n	8001fea <_free_r+0x22>
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	6053      	str	r3, [r2, #4]
 800202e:	4408      	add	r0, r1
 8002030:	6010      	str	r0, [r2, #0]
 8002032:	e7da      	b.n	8001fea <_free_r+0x22>
 8002034:	d902      	bls.n	800203c <_free_r+0x74>
 8002036:	230c      	movs	r3, #12
 8002038:	602b      	str	r3, [r5, #0]
 800203a:	e7d6      	b.n	8001fea <_free_r+0x22>
 800203c:	6820      	ldr	r0, [r4, #0]
 800203e:	1821      	adds	r1, r4, r0
 8002040:	428b      	cmp	r3, r1
 8002042:	bf04      	itt	eq
 8002044:	6819      	ldreq	r1, [r3, #0]
 8002046:	685b      	ldreq	r3, [r3, #4]
 8002048:	6063      	str	r3, [r4, #4]
 800204a:	bf04      	itt	eq
 800204c:	1809      	addeq	r1, r1, r0
 800204e:	6021      	streq	r1, [r4, #0]
 8002050:	6054      	str	r4, [r2, #4]
 8002052:	e7ca      	b.n	8001fea <_free_r+0x22>
 8002054:	bd38      	pop	{r3, r4, r5, pc}
 8002056:	bf00      	nop
 8002058:	200001c4 	.word	0x200001c4

0800205c <_malloc_usable_size_r>:
 800205c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002060:	1f18      	subs	r0, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	bfbc      	itt	lt
 8002066:	580b      	ldrlt	r3, [r1, r0]
 8002068:	18c0      	addlt	r0, r0, r3
 800206a:	4770      	bx	lr

0800206c <_init>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr

08002078 <_fini>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	bf00      	nop
 800207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207e:	bc08      	pop	{r3}
 8002080:	469e      	mov	lr, r3
 8002082:	4770      	bx	lr
